{"version":3,"sources":["types/index.ts","types/enums.ts","components/header/Header.tsx","components/field/StartCell.tsx","components/field/EndCell.tsx","components/field/FieldRow.tsx","algorithms/BaseAlgorithm.ts","algorithms/BreadthFirstSearch.ts","algorithms/DepthFirstSearch.ts","algorithms/PriorityQueue.ts","algorithms/Djikstra.ts","algorithms/GreedyAlgorithm.ts","algorithms/AStarAlgorithm.ts","constants/Algorithms.ts","context/GridSettingsContext.ts","components/field/Field.tsx","components/input/DropDownMenu.tsx","components/controller/WallsController.tsx","components/input/ButtonSwitch.tsx","components/settings/PathFinderSettings.tsx","views/MainView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AlgorithmEnum","SpeedEnum","AlgorithmStatus","Header","StartCell","cell","className","key","x","y","div","initial","top","animate","transition","ease","duration","style","position","left","size","EndCell","getColor","iter","red","green","blue","Math","min","memo","row","onClick","map","c","isStart","isEnd","isWall","visited","isShortestPath","background","undefined","e","prev","next","areEqual","BaseAlgorithm","options","grid","startCell","targetCell","rows","columns","finished","this","includeVisited","neighboors","check","marked","push","diff","i","length","j","BreadthFirstSearch","queue","changedRows","Set","node","shift","getNeighboors","forEach","n","add","DepthFirstSearch","stack","pop","PriorityQueue","items","elem","priority","contain","splice","t","console","log","Djikstra","dist","Map","previousCell","set","Infinity","enqueue","found","isEmpty","dequeue","exisitingDist","get","distToNeighboor","hasValue","changePriority","current","GreedyAlgorithm","distToTarget","manhattanDistanceHeuristic","abs","AStarAlgorithm","resume","ALGORITHMS","BREADTH_FIRST_SEARCH","name","id","start","DEPTH_FIRST_SEARCH","DJIKSTRA","GREEDY_ALGORITHM","A_STAR_ALGORITHM","SPEED","value","label","SLOW","MEDIUM","FAST","DIMENSIONS","defaultContext","algorithm","status","PREPARATION","fieldCallbacks","reset","resetWalls","generateRandomWalls","walls","speed","dimensions","setAlgorithm","setWalls","setFieldCallbacks","setSpeed","setStatus","GridSettingsContext","React","createContext","getGrid","arr","Field","useContext","useState","changeDiff","setChangeDiff","useRef","ref","setStart","end","setEnd","requestRef","timeoutRef","useEffect","g","counter","random","RUNNING","startTime","tick","endTime","Date","now","PAUSED","isFinished","window","setTimeout","FINISHED","clickCallback","useCallback","event","r","table","onMouseMoveHandler","altKey","floor","pageX","offsetLeft","pageY","offsetTop","cellSpacing","onMouseDown","preventDefault","addEventListener","onMouseLeave","removeEventListener","onMouseUp","shouldRender","has","DropDownMenu","disabled","onChange","dropDownIsVisible","setDropDownIsVisible","color","padding","borderRadius","boxShadow","display","flexDirection","justifyContent","alignItems","userSelect","cursor","opacity","transform","exit","width","height","backdropFilter","stopPropagation","opt","WallsController","margin","marginBottom","fontWeight","fontSize","ButtonSwitch","o","classNames","classnames","PathFinderSettings","marginTop","Object","values","algo","newSpeed","marginLeft","MainView","getWidthAndHeight","max","document","documentElement","clientWidth","innerWidth","clientHeight","innerHeight","App","vw","vh","setDimensions","func","_","debounce","Provider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.20909eb9.chunk.js","sourcesContent":["export type Cell = {\n  x: number;\n  y: number;\n  visited: boolean;\n  isStart: boolean;\n  isEnd: boolean;\n  isWall: boolean;\n  isShortestPath: boolean;\n  iter: number;\n  marked: boolean;\n};\n\nexport * from \"./enums\";\nexport * from \"./algorithms\";\n","export enum AlgorithmEnum {\n  BREADTH_FIRST_SEARCH = 1,\n  DEPTH_FIRST_SEARCH,\n  DJIKSTRA,\n  GREEDY_ALGORITHM,\n  A_STAR_ALGORITHM,\n}\n\nexport enum SpeedEnum {\n  SLOW = 1,\n  MEDIUM,\n  FAST,\n}\n\nexport enum AlgorithmStatus {\n  PREPARATION = 0,\n  RUNNING,\n  PAUSED,\n  FINISHED,\n}\n","// @ts-nocheck\nimport React, { useContext } from \"react\";\nimport GridSettingsContext from \"../../context/GridSettingsContext\";\nimport { ALGORITHMS } from \"../../constants/Algorithms\";\n\nconst Header: React.FC<{}> = () => {\n  // const { algorithm, setAlgorithm } = useContext(GridSettingsContext);\n  return (\n    <header>\n      <span>Algorithmic</span>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Cell } from \"../../types\";\nimport { FaMapMarkerAlt } from \"react-icons/fa\";\nimport { motion } from \"framer-motion\";\n\ntype StartCellProps = {\n  cell: Cell;\n};\n\nconst StartCell: React.FC<StartCellProps> = ({ cell }) => {\n  return (\n    <td className=\"start\" key={`${cell.x}-${cell.y}`}>\n      <motion.div\n        initial={{ top: \"-21px\" }}\n        animate={{\n          top: \"-7px\",\n          transition: {\n            ease: \"easeIn\",\n            duration: 0.4,\n          },\n        }}\n        style={{ position: \"absolute\", left: \"-1px\" }}\n      >\n        <FaMapMarkerAlt size={16} />\n      </motion.div>\n    </td>\n  );\n};\n\nexport default StartCell;\n","import React from \"react\";\nimport { Cell } from \"../../types\";\nimport { FaMapPin } from \"react-icons/fa\";\nimport { motion } from \"framer-motion\";\n\ntype EndCellProps = {\n  cell: Cell;\n};\n\nconst EndCell: React.FC<EndCellProps> = ({ cell }) => {\n  return (\n    <td className=\"end\" key={`${cell.x}-${cell.y}`}>\n      <motion.div\n        initial={{ top: \"-21px\" }}\n        animate={{\n          top: \"-7px\",\n          transition: {\n            ease: \"easeIn\",\n            duration: 0.4,\n          },\n        }}\n        style={{ position: \"absolute\", left: \"-1px\" }}\n      >\n        <FaMapPin size={16} />\n      </motion.div>\n    </td>\n  );\n};\n\nexport default EndCell;\n","import React, { memo } from \"react\";\nimport { Cell } from \"../../types\";\nimport StartCell from \"./StartCell\";\nimport EndCell from \"./EndCell\";\n\nfunction getColor(iter: number): string {\n  const red = 10 - (10 - 6) * (iter / (60 * 70));\n  const green = 132 - (132 - 51) * (iter / (60 * 70));\n  const blue = 255 - (255 - 97) * (iter / (60 * 70));\n\n  return `rgb(${Math.min(10, red)}, ${Math.min(132, green)}, ${Math.min(\n    255,\n    blue\n  )})`;\n}\n\ntype FieldRowProps = {\n  row: Cell[];\n  areEqual: boolean;\n  onClick: (\n    e: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>,\n    r: number,\n    c: number\n  ) => void;\n};\n\nconst FieldRow: React.FC<FieldRowProps> = ({ row, onClick }) => {\n  return (\n    <tr>\n      {row.map((c) => {\n        if (c.isStart) {\n          return <StartCell cell={c} key={`${c.x}-${c.y}`} />;\n        }\n        if (c.isEnd) {\n          return <EndCell cell={c} key={`${c.x}-${c.y}`} />;\n        }\n        return (\n          <td\n            className={`${\n              c.isWall\n                ? \"wall\"\n                : c.visited\n                ? \"visited\"\n                : c.isShortestPath\n                ? \"shortest\"\n                : \"\"\n            }`}\n            style={{\n              background:\n                c.visited && c.iter != 0 ? getColor(c.iter) : undefined,\n            }}\n            key={`${c.x}-${c.y}`}\n            onClick={(e) => onClick(e, c.x, c.y)}\n          >\n            {\"\"}\n          </td>\n        );\n      })}\n    </tr>\n  );\n};\n\nexport default memo(FieldRow, (prev, next) => {\n  return prev.onClick === next.onClick && next.areEqual;\n});\n","import { Cell, AlgorithmOptions } from \"../types\";\n\nclass BaseAlgorithm {\n  protected grid: Cell[][];\n\n  protected startCell: Cell;\n  protected targetCell: Cell;\n\n  protected rows: number;\n  protected columns: number;\n  protected iter: number;\n\n  protected finished: boolean;\n\n  constructor(options: AlgorithmOptions) {\n    this.grid = options.grid;\n    this.startCell = options.startCell;\n    this.targetCell = options.targetCell;\n\n    this.rows = options.rows;\n    this.columns = options.columns;\n\n    this.iter = 0;\n\n    this.finished = false;\n  }\n\n  getNeighboors(grid: Cell[][], cell: Cell, includeVisited = false): Cell[] {\n    this.iter++;\n    const neighboors = [];\n    const { x, y } = cell;\n    if (x - 1 >= 0) {\n      const check = grid[x - 1][y];\n      if (!check.isWall && (includeVisited || !check.visited)) {\n        check.iter = this.iter;\n        check.marked = true;\n        neighboors.push(check);\n      }\n    }\n\n    if (y - 1 >= 0) {\n      const check = grid[x][y - 1];\n      if (!check.isWall && (includeVisited || !check.visited)) {\n        check.iter = this.iter;\n        check.marked = true;\n        neighboors.push(check);\n      }\n    }\n\n    if (y + 1 < this.columns) {\n      const check = grid[x][y + 1];\n      if (!check.isWall && (includeVisited || !check.visited)) {\n        check.iter = this.iter;\n        check.marked = true;\n        neighboors.push(check);\n      }\n    }\n\n    if (x + 1 < this.rows) {\n      const check = grid[x + 1][y];\n      if (!check.isWall && (includeVisited || !check.visited)) {\n        check.iter = this.iter;\n        check.marked = true;\n        neighboors.push(check);\n      }\n    }\n\n    return neighboors;\n  }\n\n  deleteWalls(): number[] {\n    const diff = [];\n    for (let i = 0; i < this.grid.length; i++) {\n      for (let j = 0; j < this.grid[i].length; j++) {\n        if (this.grid[i][j].isWall) {\n          this.grid[i][j].isWall = false;\n          diff.push(i);\n        }\n      }\n    }\n    return diff;\n  }\n\n  isFinished(): boolean {\n    return this.finished;\n  }\n}\n\nexport default BaseAlgorithm;\n","import { Cell, AlgorithmOptions } from \"../types\";\nimport BaseAlgorithm from \"./BaseAlgorithm\";\n\nclass BreadthFirstSearch extends BaseAlgorithm {\n  private queue: Cell[];\n  constructor(options: AlgorithmOptions) {\n    super(options);\n    this.startCell.visited = true;\n    this.queue = [this.startCell];\n  }\n\n  tick() {\n    const changedRows: Set<number> = new Set();\n    if (this.queue.length !== 0) {\n      const node = this.queue.shift() as Cell;\n      this.getNeighboors(this.grid, node).forEach((n) => {\n        if (n === this.targetCell) {\n          this.finished = true;\n        } else if (!n.visited) {\n          changedRows.add(n.x);\n          n.visited = true;\n          this.queue.push(n);\n        }\n      });\n    } else {\n      this.finished = true;\n    }\n    return { changedRows };\n  }\n}\n\nexport default BreadthFirstSearch;\n","import { AlgorithmOptions, Cell } from \"../types\";\nimport BaseAlgorithm from \"./BaseAlgorithm\";\n\nclass DepthFirstSearch extends BaseAlgorithm {\n  private stack: Cell[];\n\n  constructor(options: AlgorithmOptions) {\n    super(options);\n\n    this.stack = [this.startCell];\n  }\n\n  tick() {\n    const changedRows: Set<number> = new Set();\n\n    if (this.stack.length !== 0) {\n      const node = this.stack.pop() as Cell;\n      node.visited = true;\n      const { x, y } = node;\n      changedRows.add(x);\n\n      this.getNeighboors(this.grid, node).forEach((n) => {\n        if (n === this.targetCell) {\n          this.finished = true;\n        } else if (!n.visited) {\n          this.stack.push(n);\n        }\n      });\n    } else {\n      this.finished = true;\n    }\n\n    return { changedRows };\n  }\n}\n\nexport default DepthFirstSearch;\n","class PriorityQueue<T> {\n  private items: { elem: T; priority: number }[];\n  constructor() {\n    this.items = [];\n  }\n\n  enqueue(elem: T, priority: number) {\n    let contain = false;\n\n    for (let i = 0; i < this.items.length; i++) {\n      if (this.items[i].priority < priority) {\n        this.items.splice(i, 0, { elem, priority });\n        contain = true;\n        break;\n      }\n    }\n\n    if (!contain) {\n      this.items.push({ elem, priority });\n    }\n  }\n\n  dequeue(): T | undefined {\n    return this.items.pop()?.elem;\n  }\n  isEmpty(): boolean {\n    return this.items.length === 0;\n  }\n\n  changePriority(t: T, priority: number) {\n    let deleted = false;\n    for (let i = 0; i < this.items.length; i++) {\n      if (this.items[i].elem === t) {\n        this.items.splice(i, 1);\n        break;\n      }\n    }\n    if (deleted) {\n      this.enqueue(t, priority);\n    }\n  }\n\n  hasValue(t: T): boolean {\n    for (let i = 0; i < this.items.length; i++) {\n      if (this.items[i].elem === t) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  printQueue() {\n    console.log(this.items);\n  }\n}\n\nexport default PriorityQueue;\n","import { AlgorithmOptions, Cell } from \"../types\";\nimport PriorityQueue from \"./PriorityQueue\";\nimport BaseAlgorithm from \"./BaseAlgorithm\";\n\nclass Djikstra extends BaseAlgorithm {\n  private dist = new Map<Cell, number>();\n  private queue = new PriorityQueue<Cell>();\n  private previousCell = new Map<Cell, Cell | null>();\n\n  constructor(options: AlgorithmOptions) {\n    super(options);\n\n    this.dist.set(this.startCell, 0);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.grid[i][j] != this.startCell) {\n          this.dist.set(this.grid[i][j], Infinity);\n          this.previousCell.set(this.grid[i][j], null);\n        }\n      }\n    }\n\n    this.queue.enqueue(this.startCell, 0);\n  }\n\n  tick() {\n    let found = false;\n    const changedRows: Set<number> = new Set();\n\n    if (!this.queue.isEmpty()) {\n      const node = this.queue.dequeue() as Cell;\n\n      const { x, y } = node;\n\n      this.getNeighboors(this.grid, node).forEach((n) => {\n        const exisitingDist = this.dist.get(n) as number;\n        const distToNeighboor = (this.dist.get(node) as number) + 1;\n\n        if (distToNeighboor < exisitingDist) {\n          this.dist.set(n, distToNeighboor);\n\n          if (this.queue.hasValue(n)) {\n            this.queue.changePriority(n, distToNeighboor);\n          }\n        }\n\n        if (!this.queue.hasValue(n)) {\n          this.queue.enqueue(n, distToNeighboor);\n        }\n\n        this.previousCell.set(n, node);\n      });\n\n      if (node === this.targetCell) {\n        this.finished = true;\n        found = true;\n      }\n      node.visited = true;\n      changedRows.add(x);\n    } else {\n      this.finished = true;\n    }\n\n    if (found) {\n      let current = this.targetCell;\n      current.isShortestPath = true;\n      let i = 0;\n      while (current !== this.startCell && i < 100) {\n        current = this.previousCell.get(current) as Cell;\n        current.isShortestPath = true;\n        changedRows.add(current.x);\n        i++;\n      }\n    }\n\n    return { changedRows };\n  }\n}\n\nexport default Djikstra;\n","import BaseAlgorithm from \"./BaseAlgorithm\";\nimport { AlgorithmOptions, Cell } from \"../types\";\nimport PriorityQueue from \"./PriorityQueue\";\n\nclass GreedyAlgorithm extends BaseAlgorithm {\n  private dist = new Map<Cell, number>();\n  private queue = new PriorityQueue<Cell>();\n  private previousCell = new Map<Cell, Cell | null>();\n\n  constructor(options: AlgorithmOptions) {\n    super(options);\n\n    this.dist.set(this.startCell, 0);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.grid[i][j] != this.startCell) {\n          this.dist.set(this.grid[i][j], Infinity);\n          this.previousCell.set(this.grid[i][j], null);\n        }\n      }\n    }\n\n    this.queue.enqueue(this.startCell, 0);\n  }\n\n  tick() {\n    let found = false;\n    const changedRows: Set<number> = new Set();\n\n    if (!this.queue.isEmpty()) {\n      const node = this.queue.dequeue() as Cell;\n\n      const { x, y } = node;\n\n      this.getNeighboors(this.grid, node).forEach((n) => {\n        const exisitingDist = this.dist.get(n) as number;\n        const distToTarget = this.manhattanDistanceHeuristic(n);\n\n        if (distToTarget < exisitingDist) {\n          this.dist.set(n, distToTarget);\n\n          if (this.queue.hasValue(n)) {\n            this.queue.changePriority(n, distToTarget);\n          }\n        }\n\n        if (!this.queue.hasValue(n)) {\n          this.queue.enqueue(n, distToTarget);\n        }\n\n        this.previousCell.set(n, node);\n      });\n\n      if (node === this.targetCell) {\n        found = true;\n        this.finished = true;\n      }\n      node.visited = true;\n      changedRows.add(x);\n    } else {\n      this.finished = true;\n    }\n\n    if (found) {\n      let current = this.targetCell;\n      current.isShortestPath = true;\n      let i = 0;\n      while (current !== this.startCell && i < 100) {\n        current = this.previousCell.get(current) as Cell;\n        current.isShortestPath = true;\n        changedRows.add(current.x);\n        i++;\n      }\n    }\n\n    return { changedRows };\n  }\n\n  manhattanDistanceHeuristic(cell: Cell): number {\n    const dx = Math.abs(cell.x - this.targetCell.x);\n    const dy = Math.abs(cell.y - this.targetCell.y);\n    return dx + dy;\n  }\n}\n\nexport default GreedyAlgorithm;\n","import BaseAlgorithm from \"./BaseAlgorithm\";\nimport { AlgorithmOptions, Cell } from \"../types\";\nimport PriorityQueue from \"./PriorityQueue\";\n\nclass AStarAlgorithm extends BaseAlgorithm {\n  private dist = new Map<Cell, number>();\n  private queue = new PriorityQueue<Cell>();\n  private previousCell = new Map<Cell, Cell | null>();\n\n  constructor(options: AlgorithmOptions) {\n    super(options);\n\n    this.dist.set(this.startCell, 0);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.grid[i][j] != this.startCell) {\n          this.dist.set(this.grid[i][j], Infinity);\n          this.previousCell.set(this.grid[i][j], null);\n        }\n      }\n    }\n\n    this.queue.enqueue(this.startCell, 0);\n  }\n\n  tick() {\n    let found = false;\n    const changedRows: Set<number> = new Set();\n\n    if (!this.queue.isEmpty()) {\n      const node = this.queue.dequeue() as Cell;\n\n      const { x, y } = node;\n\n      this.getNeighboors(this.grid, node).forEach((n) => {\n        const exisitingDist = this.dist.get(n) as number;\n        const distToTarget =\n          (this.dist.get(node) as number) +\n          1 +\n          this.manhattanDistanceHeuristic(n);\n\n        if (distToTarget < exisitingDist) {\n          this.dist.set(n, distToTarget);\n\n          if (this.queue.hasValue(n)) {\n            this.queue.changePriority(n, distToTarget);\n          }\n        }\n\n        if (!this.queue.hasValue(n)) {\n          this.queue.enqueue(n, distToTarget);\n        }\n\n        this.previousCell.set(n, node);\n      });\n\n      if (node === this.targetCell) {\n        found = true;\n        this.finished = true;\n      }\n      node.visited = true;\n      changedRows.add(x);\n    } else {\n      this.finished = true;\n    }\n\n    if (found) {\n      let current = this.targetCell;\n      current.isShortestPath = true;\n      let i = 0;\n      while (current !== this.startCell && i < 100) {\n        current = this.previousCell.get(current) as Cell;\n        current.isShortestPath = true;\n        changedRows.add(current.x);\n        i++;\n      }\n    }\n\n    return { resume: !found || this.queue.isEmpty(), changedRows };\n  }\n\n  manhattanDistanceHeuristic(cell: Cell): number {\n    const dx = Math.abs(cell.x - this.targetCell.x);\n    const dy = Math.abs(cell.y - this.targetCell.y);\n    return dx + dy;\n  }\n}\n\nexport default AStarAlgorithm;\n","import {\n  AlgorithmEnum,\n  Algorithm,\n  AlgorithmStore,\n  Cell,\n  SpeedEnum,\n} from \"../types\";\nimport BreadthFirstSearch from \"../algorithms/BreadthFirstSearch\";\nimport DepthFirstSearch from \"../algorithms/DepthFirstSearch\";\nimport Djikstra from \"../algorithms/Djikstra\";\nimport GreedyAlgorithm from \"../algorithms/GreedyAlgorithm\";\nimport AStarAlgorithm from \"../algorithms/AStarAlgorithm\";\n\nexport const ALGORITHMS: AlgorithmStore = {\n  [AlgorithmEnum.BREADTH_FIRST_SEARCH]: {\n    name: \"Breadth First Search\",\n    id: AlgorithmEnum.BREADTH_FIRST_SEARCH,\n    start: (options) => {\n      return new BreadthFirstSearch(options);\n    },\n  },\n  [AlgorithmEnum.DEPTH_FIRST_SEARCH]: {\n    name: \"Depth First Search\",\n    id: AlgorithmEnum.DEPTH_FIRST_SEARCH,\n    start: (options) => {\n      return new DepthFirstSearch(options);\n    },\n  },\n  [AlgorithmEnum.DJIKSTRA]: {\n    name: \"Djikstra Algorithm\",\n    id: AlgorithmEnum.DJIKSTRA,\n    start: (options) => {\n      return new Djikstra(options);\n    },\n  },\n  [AlgorithmEnum.GREEDY_ALGORITHM]: {\n    name: \"Greedy Algorithm\",\n    id: AlgorithmEnum.GREEDY_ALGORITHM,\n    start: (options) => {\n      return new GreedyAlgorithm(options);\n    },\n  },\n  [AlgorithmEnum.A_STAR_ALGORITHM]: {\n    name: \"A* Algorithm\",\n    id: AlgorithmEnum.A_STAR_ALGORITHM,\n    start: (options) => {\n      return new AStarAlgorithm(options);\n    },\n  },\n};\n\nexport const SPEED = [\n  {\n    value: 110,\n    label: \"Slow\",\n    id: SpeedEnum.SLOW,\n  },\n  {\n    value: 60,\n    label: \"Medium\",\n    id: SpeedEnum.MEDIUM,\n  },\n  {\n    value: 30,\n    label: \"Fast\",\n    id: SpeedEnum.FAST,\n  },\n];\n\nexport const DIMENSIONS = {\n  minColumns: 26,\n  minRows: 37,\n  maxColumns: 85,\n  maxRows: 85,\n};\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { ALGORITHMS, SPEED, DIMENSIONS } from \"../constants/Algorithms\";\nimport {\n  Algorithm,\n  FieldCallbacks,\n  SpeedOption,\n  AlgorithmStatus,\n  Dimensions,\n} from \"../types\";\n\nexport const defaultContext = {\n  algorithm: ALGORITHMS[1],\n  status: AlgorithmStatus.PREPARATION,\n  fieldCallbacks: {\n    reset: () => {},\n    resetWalls: () => {},\n    generateRandomWalls: () => {},\n  },\n  walls: 0,\n  speed: SPEED[0],\n  dimensions: { columns: DIMENSIONS.minColumns, rows: DIMENSIONS.minRows },\n  setAlgorithm: () => console.log(\"NOT IMPLEMENTED\"),\n  setWalls: () => console.log(\"setWalls() NOT IMPLEMENTED\"),\n  setFieldCallbacks: () => console.log(\"setFieldCallbacks NOT IMPLEMENTED\"),\n  setSpeed: () => console.log(\"setSpeed NOT IMPLEMENTED\"),\n  setStatus: () => console.log(\"setStatus NOT IMPLEMENTED\"),\n};\n\nconst GridSettingsContext = React.createContext<{\n  algorithm: Algorithm;\n  status: AlgorithmStatus;\n  walls: number;\n  speed: SpeedOption;\n  fieldCallbacks: FieldCallbacks;\n  dimensions: Dimensions;\n  setAlgorithm: Dispatch<SetStateAction<Algorithm>>;\n  setWalls: Dispatch<SetStateAction<number>>;\n  setFieldCallbacks: Dispatch<SetStateAction<FieldCallbacks>>;\n  setSpeed: Dispatch<SetStateAction<SpeedOption>>;\n  setStatus: Dispatch<SetStateAction<AlgorithmStatus>>;\n}>(defaultContext);\n\nexport default GridSettingsContext;\n","import React, {\n  useRef,\n  useEffect,\n  useState,\n  useCallback,\n  useContext,\n} from \"react\";\nimport \"../../css/field.scss\";\nimport _ from \"lodash\";\nimport { Cell, IAlgorithm, AlgorithmStatus } from \"../../types\";\nimport FieldRow from \"./FieldRow\";\nimport GridSettingsContext from \"../../context/GridSettingsContext\";\n\nfunction getGrid(rows: number, columns: number): Cell[][] {\n  const arr = [];\n  for (let i = 0; i < rows; i++) {\n    let row = [];\n    for (let j = 0; j < columns; j++) {\n      row.push({\n        x: i,\n        y: j,\n        visited: false,\n        isStart: false,\n        isEnd: false,\n        isWall: false,\n        isShortestPath: false,\n        iter: 0,\n        marked: false,\n      });\n    }\n    arr.push(row);\n  }\n  return arr;\n}\n\nconst Field: React.FC<{}> = () => {\n  const {\n    status,\n    algorithm,\n    speed,\n    dimensions,\n    setWalls,\n    setFieldCallbacks,\n    setStatus,\n  } = useContext(GridSettingsContext);\n  const [changeDiff, setChangeDiff] = useState<Set<number>>(new Set());\n  let grid = useRef<Cell[][]>(getGrid(dimensions.rows, dimensions.columns));\n  const ref = useRef<IAlgorithm | null>(null);\n  const [start, setStart] = useState<{ x: number; y: number } | null>(null);\n  const [end, setEnd] = useState<{ x: number; y: number } | null>(null);\n  const requestRef = useRef<number | null>(null);\n  const timeoutRef = useRef<number | null>(null);\n\n  useEffect(() => {\n    setFieldCallbacks((prev) => {\n      return {\n        ...prev,\n        reset: () => {\n          grid.current = getGrid(dimensions.rows, dimensions.columns);\n          setStart(null);\n          setEnd(null);\n          setChangeDiff(new Set(grid.current.map((g, i) => i)));\n          setWalls(0);\n          ref.current = null;\n          timeoutRef.current = null;\n        },\n        generateRandomWalls: () => {\n          const diff: Set<number> = new Set();\n          let counter = 0;\n          for (let i = 0; i < grid.current.length; i++) {\n            diff.add(i);\n            for (let j = 0; j < grid.current[i].length; j++) {\n              const cell = grid.current[i][j];\n              if (!cell.visited && !cell.isEnd && !cell.isStart) {\n                const ran = Math.random();\n                if (ran < 0.15) {\n                  cell.isWall = true;\n                  counter++;\n                } else {\n                  cell.isWall = false;\n                }\n              }\n            }\n          }\n          setChangeDiff(diff);\n          setWalls(counter);\n        },\n        resetWalls: () => {\n          const diff: Set<number> = new Set();\n          for (let i = 0; i < grid.current.length; i++) {\n            for (let j = 0; j < grid.current[i].length; j++) {\n              if (grid.current[i][j].isWall) {\n                grid.current[i][j].isWall = false;\n                diff.add(i);\n              }\n            }\n          }\n          setChangeDiff(diff);\n          setWalls(0);\n        },\n      };\n    });\n  }, [grid.current]);\n  useEffect(() => {\n    if (start && end) {\n      if (ref.current === null) {\n        ref.current = algorithm.start({\n          grid: grid.current,\n          startCell: grid.current[start.x][start.y],\n          targetCell: grid.current[end.x][end.y],\n          rows: dimensions.rows,\n          columns: dimensions.columns,\n        });\n        setChangeDiff(new Set());\n        setStatus(AlgorithmStatus.RUNNING);\n      }\n    }\n  }, [start, end]);\n\n  const animate = (startTime: number) => {\n    const { changedRows } = (ref.current as IAlgorithm).tick();\n    setChangeDiff(changedRows);\n    const endTime = Date.now();\n    requestRef.current = endTime + (speed.value - (endTime - startTime));\n  };\n\n  useEffect(() => {\n    if (\n      ref.current &&\n      status !== AlgorithmStatus.PAUSED &&\n      timeoutRef.current === null\n    ) {\n      if (start && end && !ref.current?.isFinished()) {\n        const startTime = Date.now();\n        if (requestRef.current && startTime < requestRef.current) {\n          timeoutRef.current = window.setTimeout(() => {\n            if (ref.current) {\n              animate(startTime);\n              timeoutRef.current = null;\n            }\n          }, requestRef.current - startTime);\n        } else {\n          animate(startTime);\n        }\n      }\n      if (ref.current.isFinished()) {\n        setStatus(AlgorithmStatus.FINISHED);\n      }\n    }\n  });\n\n  const clickCallback = useCallback(\n    (\n      event: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>,\n      r: number,\n      c: number\n    ) => {\n      if (start === null && !grid.current[r][c].isWall) {\n        setStart({ x: r, y: c });\n        setChangeDiff(new Set([r]));\n        grid.current[r][c].isStart = true;\n      }\n      if (end === null && start !== null && !grid.current[r][c].isWall) {\n        setEnd({ x: r, y: c });\n        setChangeDiff(new Set([r]));\n        grid.current[r][c].isEnd = true;\n      }\n    },\n    [start, end]\n  );\n\n  const table = useRef<HTMLTableElement | null>(null);\n  const onMouseMoveHandler = useCallback(\n    (e: MouseEvent) => {\n      if (e.altKey && table.current) {\n        const y = Math.floor((e.pageX - table.current.offsetLeft) / 16);\n        const x = Math.floor((e.pageY - table.current.offsetTop) / 16);\n        if (\n          y >= 0 &&\n          x >= 0 &&\n          y <= dimensions.columns &&\n          x <= dimensions.rows\n        ) {\n          const cell = grid.current[x][y];\n          if (\n            cell &&\n            !cell.isWall &&\n            !cell.marked &&\n            !(cell.visited && cell.isStart && cell.isEnd)\n          ) {\n            cell.isWall = true;\n            setChangeDiff(new Set([x]));\n            setWalls((prev) => prev + 1);\n          }\n        }\n      }\n    },\n    [grid.current]\n  );\n\n  useEffect(() => {\n    grid.current = getGrid(dimensions.rows, dimensions.columns);\n    setStart(null);\n    setEnd(null);\n    setChangeDiff(new Set(grid.current.map((g, i) => i)));\n    ref.current = null;\n    timeoutRef.current = null;\n  }, [dimensions.columns, dimensions.rows]);\n\n  return (\n    <>\n      <table\n        ref={table}\n        className=\"field\"\n        cellSpacing={0}\n        onMouseDown={(e) => {\n          e.preventDefault();\n          if (table.current && e.altKey) {\n            table.current.addEventListener(\"mousemove\", onMouseMoveHandler);\n          }\n        }}\n        onMouseLeave={() => {\n          table.current?.removeEventListener(\"mousemove\", onMouseMoveHandler);\n        }}\n        onMouseUp={() => {\n          table.current?.removeEventListener(\"mousemove\", onMouseMoveHandler);\n        }}\n      >\n        <tbody>\n          {grid.current.map((r, i) => {\n            const shouldRender = changeDiff.has(i);\n            return (\n              <FieldRow\n                key={i}\n                row={r}\n                onClick={clickCallback}\n                areEqual={!shouldRender}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default Field;\n","import React, { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { IoIosArrowDown } from \"react-icons/io\";\nimport \"../../css/drop-down-menu.scss\";\n\ninterface OptionValue {\n  id: string | number;\n  name: string;\n}\n\ntype DropwDownMenuProps<T extends OptionValue> = {\n  options: T[];\n  value: T;\n  disabled: boolean;\n  onChange: (t: T) => void;\n};\n\nfunction DropDownMenu<T extends OptionValue>({\n  options,\n  value,\n  disabled,\n  onChange,\n}: DropwDownMenuProps<T> & { children?: React.ReactNode }): React.ReactElement {\n  const [dropDownIsVisible, setDropDownIsVisible] = useState(false);\n  return (\n    <div\n      style={{\n        position: \"relative\",\n        background: \"#0b131b\",\n        color: \"white\",\n        padding: \"8px\",\n        borderRadius: \"4px\",\n        boxShadow: \"inset rgba(255,255,255,0.25) 0px 6px 14px\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        userSelect: \"none\",\n        cursor: disabled ? \"not-allowed\" : \"pointer\",\n        opacity: disabled ? 0.4 : 1,\n      }}\n      onClick={() => {\n        if (disabled) return;\n        setDropDownIsVisible(true);\n      }}\n    >\n      {value.name}\n      <IoIosArrowDown\n        size={20}\n        style={{\n          transform: `rotate(${dropDownIsVisible ? 180 : 0}deg)`,\n          transition: \"transform 0.3s\",\n        }}\n      />\n      <AnimatePresence>\n        {dropDownIsVisible && (\n          <>\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{\n                opacity: 0.3,\n                transition: {\n                  ease: \"easeOut\",\n                  duration: 0.2,\n                },\n              }}\n              exit={{ opacity: 0 }}\n              style={{\n                position: \"fixed\",\n                top: 0,\n                left: 0,\n                background: \"rgb(0,0,0)\",\n                width: \"100vw\",\n                height: \"100vh\",\n                backdropFilter: \"blur(8px)\",\n              }}\n              onClick={(e) => {\n                e.stopPropagation();\n                setDropDownIsVisible(false);\n              }}\n            ></motion.div>\n            <motion.div\n              className=\"select-menu\"\n              initial={{\n                opacity: 0,\n                transform: \"scale(0.2) translateY(-50px)\",\n              }}\n              animate={{\n                opacity: 1,\n                transform: \"scale(1)  translateY(0px)\",\n                transition: { duration: 0.15, ease: \"easeIn\" },\n              }}\n              exit={{\n                opacity: 0,\n                transform: \"scale(0.2)  translateY(-50px)\",\n                transition: { duration: 0.15, ease: \"easeIn\" },\n              }}\n            >\n              {options.map((opt) => (\n                <p\n                  className={value === opt ? \"selected\" : undefined}\n                  key={opt.id}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onChange(opt);\n                    setDropDownIsVisible(false);\n                  }}\n                >\n                  {opt.name}\n                </p>\n              ))}\n            </motion.div>\n          </>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\nexport default DropDownMenu;\n","import React, { useContext } from \"react\";\nimport { IoIosInformationCircleOutline } from \"react-icons/io\";\nimport GridSettingsContext from \"../../context/GridSettingsContext\";\n\nconst WallsController: React.FC = () => {\n  const { walls, fieldCallbacks } = useContext(GridSettingsContext);\n  return (\n    <div style={{ margin: \"20px 0\" }}>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          marginBottom: \"8px\",\n        }}\n      >\n        <h2\n          style={{ fontWeight: 300, fontSize: \"1.35em\", margin: \"0 16px 0 0\" }}\n        >\n          <span style={{ fontSize: \"1.2em\", fontWeight: 500 }}>{walls}</span>{\" \"}\n          Walls\n        </h2>\n        <IoIosInformationCircleOutline size={26} />\n      </div>\n      <div\n        style={{\n          width: \"145px\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <button\n          className=\"btn primary\"\n          onClick={() => fieldCallbacks.generateRandomWalls()}\n        >\n          Random\n        </button>\n        <button\n          disabled={walls === 0}\n          className=\"btn primary danger\"\n          onClick={() => fieldCallbacks.resetWalls()}\n        >\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default WallsController;\n","import React from \"react\";\nimport classnames from \"classnames\";\n\ninterface Option {\n  label: string;\n  value: string | number;\n}\n\ntype ButtonSwitchProps<T extends Option> = {\n  value: T;\n  options: T[];\n  onChange: (t: T) => void;\n};\n\nfunction ButtonSwitch<T extends Option>({\n  options,\n  value,\n  onChange,\n}: ButtonSwitchProps<T> & { children?: React.ReactNode }): React.ReactElement {\n  return (\n    <div className=\"button-switch\">\n      {options.map((o) => {\n        const classNames = classnames({\n          \"button-switch-btn\": true,\n          \"button-switch-btn__selected\": o === value,\n        });\n        return (\n          <button\n            key={o.label}\n            className={classNames}\n            onClick={() => {\n              if (o !== value) {\n                onChange(o);\n              }\n            }}\n          >\n            {o.label}\n          </button>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default ButtonSwitch;\n","import React, { useContext } from \"react\";\nimport GridSettingsContext from \"../../context/GridSettingsContext\";\nimport DropDownMenu from \"../input/DropDownMenu\";\nimport { ALGORITHMS, SPEED } from \"../../constants/Algorithms\";\nimport WallsController from \"../controller/WallsController\";\nimport { Algorithm, AlgorithmStatus } from \"../../types\";\nimport ButtonSwitch from \"../input/ButtonSwitch\";\nimport { IoIosInformationCircleOutline } from \"react-icons/io\";\n\nconst PathFinderSettings: React.FC = () => {\n  const {\n    algorithm,\n    setAlgorithm,\n    speed,\n    setSpeed,\n    fieldCallbacks,\n    status,\n    setStatus,\n  } = useContext(GridSettingsContext);\n  return (\n    <div className=\"path-finder-settings\">\n      <div>\n        <h2\n          style={{\n            marginTop: 0,\n            fontWeight: 300,\n            marginBottom: \"8px\",\n            fontSize: \"1.35em\",\n          }}\n        >\n          Algorithm\n        </h2>\n        <DropDownMenu\n          disabled={status !== AlgorithmStatus.PREPARATION}\n          value={algorithm}\n          options={Object.values(ALGORITHMS)}\n          onChange={(algo: Algorithm) => setAlgorithm(algo)}\n        />\n        <WallsController />\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            marginBottom: \"8px\",\n          }}\n        >\n          <h2\n            style={{\n              fontWeight: 300,\n              fontSize: \"1.35em\",\n              margin: \"0 16px 0 0\",\n            }}\n          >\n            Speed\n          </h2>\n          <IoIosInformationCircleOutline size={26} />\n        </div>\n        <ButtonSwitch\n          options={SPEED}\n          value={speed}\n          onChange={(newSpeed) => {\n            setSpeed(newSpeed);\n          }}\n        />\n        <div\n          style={{\n            marginTop: \"32px\",\n            display: \"flex\",\n            flexDirection: \"row\",\n          }}\n        >\n          <div style={{ position: \"relative\" }}>\n            {status === AlgorithmStatus.FINISHED && (\n              <div className=\"pinger\"></div>\n            )}\n            <button\n              className=\"btn primary danger md\"\n              onClick={() => {\n                fieldCallbacks.reset();\n                setStatus(AlgorithmStatus.PREPARATION);\n              }}\n            >\n              Reset\n            </button>\n          </div>\n          <button\n            style={{ marginLeft: \"16px\" }}\n            className=\"btn primary md\"\n            disabled={\n              status === AlgorithmStatus.FINISHED ||\n              status === AlgorithmStatus.PREPARATION\n            }\n            onClick={() => {\n              if (status === AlgorithmStatus.RUNNING) {\n                setStatus(AlgorithmStatus.PAUSED);\n              } else {\n                setStatus(AlgorithmStatus.RUNNING);\n              }\n            }}\n          >\n            {status === AlgorithmStatus.PAUSED ? \"Continue\" : \"Pause\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PathFinderSettings;\n","import React from \"react\";\nimport Header from \"../components/header/Header\";\nimport Field from \"../components/field/Field\";\nimport PathFinderSettings from \"../components/settings/PathFinderSettings\";\n\nconst MainView: React.FC<{}> = () => {\n  return (\n    <div>\n      <Header></Header>\n      <main>\n        <Field />\n        <PathFinderSettings />\n      </main>\n    </div>\n  );\n};\n\nexport default MainView;\n","import React, { useState, useEffect } from \"react\";\nimport Field from \"./components/field/Field\";\nimport MainView from \"./views/MainView\";\nimport GridSettingsContext, {\n  defaultContext,\n} from \"./context/GridSettingsContext\";\nimport { Algorithm, SpeedOption, AlgorithmStatus } from \"./types\";\nimport { DIMENSIONS } from \"./constants/Algorithms\";\nimport _ from \"lodash\";\n\nfunction getWidthAndHeight(): [number, number] {\n  const vw = Math.max(\n    document.documentElement.clientWidth || 0,\n    window.innerWidth || 0\n  );\n  const vh = Math.max(\n    document.documentElement.clientHeight || 0,\n    window.innerHeight || 0\n  );\n  return [vw, vh];\n}\n\nfunction App() {\n  const [algorithm, setAlgorithm] = useState<Algorithm>(\n    defaultContext.algorithm\n  );\n  const [walls, setWalls] = useState<number>(defaultContext.walls);\n  const [fieldCallbacks, setFieldCallbacks] = useState(\n    defaultContext.fieldCallbacks\n  );\n  const [speed, setSpeed] = useState<SpeedOption>(defaultContext.speed);\n  const [status, setStatus] = useState<AlgorithmStatus>(defaultContext.status);\n  const [dimensions, setDimensions] = useState(() => {\n    const [vw, vh] = getWidthAndHeight();\n    return {\n      ...defaultContext.dimensions,\n      columns: Math.min(\n        Math.max(Math.floor((vw - 96 - 250) / 16), DIMENSIONS.minColumns),\n        DIMENSIONS.maxColumns\n      ),\n      rows: Math.min(\n        Math.max(Math.floor((vh - 128) / 16), DIMENSIONS.minRows),\n        DIMENSIONS.maxRows\n      ),\n    };\n  });\n  useEffect(() => {\n    const func = _.debounce(() => {\n      const [vw, vh] = getWidthAndHeight();\n\n      const columns = Math.min(\n        Math.max(Math.floor((vw - 96 - 250) / 16), DIMENSIONS.minColumns),\n        DIMENSIONS.maxColumns\n      );\n      const rows = Math.min(\n        Math.max(Math.floor((vh - 128) / 16), DIMENSIONS.minRows),\n        DIMENSIONS.maxRows\n      );\n\n      setDimensions({\n        columns,\n        rows,\n      });\n    }, 90);\n\n    window.addEventListener(\"resize\", func);\n\n    return () => {\n      window.removeEventListener(\"resize\", func);\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <GridSettingsContext.Provider\n        value={{\n          status,\n          algorithm,\n          fieldCallbacks,\n          walls,\n          speed,\n          dimensions,\n          setWalls,\n          setAlgorithm,\n          setFieldCallbacks,\n          setSpeed,\n          setStatus,\n        }}\n      >\n        <MainView />\n      </GridSettingsContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./css/main.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}