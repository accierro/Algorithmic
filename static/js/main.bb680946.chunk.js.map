{"version":3,"sources":["types/index.ts","types/enums.ts","components/header/Header.tsx","components/field/StartCell.tsx","components/field/EndCell.tsx","components/field/FieldRow.tsx","algorithms/BaseAlgorithm.ts","algorithms/BreadthFirstSearch.ts","algorithms/DepthFirstSearch.ts","algorithms/PriorityQueue.ts","algorithms/Djikstra.ts","algorithms/GreedyAlgorithm.ts","algorithms/AStarAlgorithm.ts","constants/Algorithms.ts","context/GridSettingsContext.ts","components/field/Field.tsx","components/input/DropDownMenu.tsx","components/settings/PathFinderSettings.tsx","views/MainView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AlgorithmEnum","Header","StartCell","cell","className","key","x","y","div","initial","top","animate","transition","ease","duration","style","position","left","size","EndCell","getColor","iter","red","green","blue","Math","min","memo","row","onClick","map","c","isStart","isEnd","isWall","visited","isShortestPath","background","undefined","e","prev","next","areEqual","BaseAlgorithm","options","grid","startCell","targetCell","rows","columns","this","includeVisited","neighboors","check","push","BreadthFirstSearch","queue","found","changedRows","length","node","shift","getNeighboors","forEach","n","resume","DepthFirstSearch","stack","pop","PriorityQueue","items","elem","priority","contain","i","splice","t","console","log","Djikstra","dist","Map","previousCell","set","j","Infinity","enqueue","isEmpty","dequeue","exisitingDist","get","distToNeighboor","hasValue","changePriority","current","GreedyAlgorithm","distToTarget","manhattanDistanceHeuristic","abs","AStarAlgorithm","ALGORITHMS","BREADTH_FIRST_SEARCH","name","id","start","DEPTH_FIRST_SEARCH","DJIKSTRA","GREEDY_ALGORITHM","A_STAR_ALGORITHM","defaultContext","algorithm","setAlgorithm","GridSettingsContext","React","createContext","Field","useContext","useState","changeDiff","setChangeDiff","useRef","arr","getGrid","ref","setStart","end","setEnd","requestRef","useEffect","tick","requestAnimationFrame","cancelAnimationFrame","clickCallback","useCallback","event","r","metaKey","ctrlKey","table","onMouseMoveHandler","altKey","floor","pageX","offsetLeft","pageY","offsetTop","cellSpacing","onMouseDown","preventDefault","addEventListener","onMouseLeave","removeEventListener","onMouseUp","shouldRender","includes","DropDownMenu","value","onChange","dropDownIsVisible","setDropDownIsVisible","color","padding","borderRadius","boxShadow","display","flexDirection","justifyContent","alignItems","transform","opacity","exit","width","height","backdropFilter","stopPropagation","opt","PathFinderSettings","marginTop","fontWeight","marginBottom","Object","values","algo","MainView","App","gridSettings","setGridSettings","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4GAWA,mE,oCCXO,IAAKA,EAAZ,kC,SAAYA,O,+CAAAA,I,2CAAAA,I,uBAAAA,I,uCAAAA,I,wCAAAA,M,mMC8BGC,EAzBc,WAE3B,OACE,gD,uBCqBWC,EApB6B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC7C,OACE,wBAAIC,UAAU,QAAQC,IAAG,UAAKF,EAAKG,EAAV,YAAeH,EAAKI,IAC3C,kBAAC,IAAOC,IAAR,CACEC,QAAS,CAAEC,IAAK,SAChBC,QAAS,CACPD,IAAK,OACLE,WAAY,CACVC,KAAM,SACNC,SAAU,KAGdC,MAAO,CAAEC,SAAU,WAAYC,KAAM,SAErC,kBAAC,IAAD,CAAgBC,KAAM,QCMfC,EApByB,SAAC,GAAc,IAAZhB,EAAW,EAAXA,KACzC,OACE,wBAAIC,UAAU,MAAMC,IAAG,UAAKF,EAAKG,EAAV,YAAeH,EAAKI,IACzC,kBAAC,IAAOC,IAAR,CACEC,QAAS,CAAEC,IAAK,SAChBC,QAAS,CACPD,IAAK,OACLE,WAAY,CACVC,KAAM,SACNC,SAAU,KAGdC,MAAO,CAAEC,SAAU,WAAYC,KAAM,SAErC,kBAAC,IAAD,CAAUC,KAAM,QClBxB,SAASE,EAASC,GAChB,IAAMC,EAAM,GAAiBD,EAAI,KAAhB,EACXE,EAAQ,IAAoBF,EAAI,KAAlB,GACdG,EAAO,IAAoBH,EAAI,KAAlB,IAEnB,MAAM,OAAN,OAAcI,KAAKC,IAAI,GAAIJ,GAA3B,aAAoCG,KAAKC,IAAI,IAAKH,GAAlD,aAA6DE,KAAKC,IAChE,IACAF,GAFF,KAgBF,I,EAoCeG,kBApC2B,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,QAChD,OACE,4BACGD,EAAIE,KAAI,SAACC,GACR,OAAIA,EAAEC,QACG,kBAAC,EAAD,CAAW7B,KAAM4B,IAEtBA,EAAEE,MACG,kBAAC,EAAD,CAAS9B,KAAM4B,IAGtB,wBACE3B,UAAS,UACP2B,EAAEG,OACE,OACAH,EAAEI,QACF,UACAJ,EAAEK,eACF,WACA,IAENrB,MAAO,CACLsB,WACEN,EAAEI,SAAqB,GAAVJ,EAAEV,KAAYD,EAASW,EAAEV,WAAQiB,GAElDjC,IAAG,UAAK0B,EAAEzB,EAAP,YAAYyB,EAAExB,GACjBsB,QAAS,SAACU,GAAD,OAAOV,EAAQU,EAAGR,EAAEzB,EAAGyB,EAAExB,KAEjC,WAQiB,SAACiC,EAAMC,GACnC,OAAOD,EAAKX,UAAYY,EAAKZ,SAAWY,EAAKC,Y,0CCDhCC,E,WAnDb,WAAYC,GAA4B,yBAR9BC,UAQ6B,OAN7BC,eAM6B,OAL7BC,gBAK6B,OAH7BC,UAG6B,OAF7BC,aAE6B,OAD7B5B,UAC6B,EACrC6B,KAAKL,KAAOD,EAAQC,KACpBK,KAAKJ,UAAYF,EAAQE,UACzBI,KAAKH,WAAaH,EAAQG,WAE1BG,KAAKF,KAAOJ,EAAQI,KACpBE,KAAKD,QAAUL,EAAQK,QAEvBC,KAAK7B,KAAO,E,0DAGAwB,EAAgB1C,GAA6C,IAAjCgD,EAAgC,wDACxED,KAAK7B,OACL,IAAM+B,EAAa,GACX9C,EAASH,EAATG,EAAGC,EAAMJ,EAANI,EACX,GAAID,EAAI,GAAK,EAAG,CACd,IAAM+C,EAAQR,EAAKvC,EAAI,GAAGC,GACrB8C,EAAMnB,SAAWiB,GAAmBE,EAAMlB,UAC7CkB,EAAMhC,KAAO6B,KAAK7B,KAClB+B,EAAWE,KAAKD,IAIpB,GAAI9C,EAAI,GAAK,EAAG,CACd,IAAM8C,EAAQR,EAAKvC,GAAGC,EAAI,GACrB8C,EAAMnB,SAAWiB,GAAmBE,EAAMlB,UAC7CkB,EAAMhC,KAAO6B,KAAK7B,KAClB+B,EAAWE,KAAKD,IAIpB,GAAI9C,EAAI,EAAI2C,KAAKD,QAAS,CACxB,IAAMI,EAAQR,EAAKvC,GAAGC,EAAI,GACrB8C,EAAMnB,SAAWiB,GAAmBE,EAAMlB,UAC7CkB,EAAMhC,KAAO6B,KAAK7B,KAClB+B,EAAWE,KAAKD,IAIpB,GAAI/C,EAAI,EAAI4C,KAAKF,KAAM,CACrB,IAAMK,EAAQR,EAAKvC,EAAI,GAAGC,GACrB8C,EAAMnB,SAAWiB,GAAmBE,EAAMlB,UAC7CkB,EAAMhC,KAAO6B,KAAK7B,KAClB+B,EAAWE,KAAKD,IAIpB,OAAOD,M,KC5BIG,E,kDAzBb,WAAYX,GAA4B,IAAD,8BACrC,cAAMA,IAFAY,WAC+B,EAErC,EAAKV,UAAUX,SAAU,EACzB,EAAKqB,MAAQ,CAAC,EAAKV,WAHkB,E,mDAM/B,IAAD,OACDW,GAAQ,EACNC,EAAwB,GAC9B,GAA0B,IAAtBR,KAAKM,MAAMG,OAAc,CAC3B,IAAMC,EAAOV,KAAKM,MAAMK,QACxBX,KAAKY,cAAcZ,KAAKL,KAAMe,GAAMG,SAAQ,SAACC,GACvCA,IAAM,EAAKjB,WACbU,GAAQ,EACEO,EAAE7B,UACZuB,EAAYJ,KAAKU,EAAE1D,GACnB0D,EAAE7B,SAAU,EACZ,EAAKqB,MAAMF,KAAKU,OAItB,MAAO,CAAEC,QAASR,GAA+B,IAAtBP,KAAKM,MAAMG,OAAcD,mB,GAvBvBf,GCgClBuB,E,kDA7Bb,WAAYtB,GAA4B,IAAD,8BACrC,cAAMA,IAHAuB,WAE+B,EAGrC,EAAKA,MAAQ,CAAC,EAAKrB,WAHkB,E,mDAM/B,IAAD,OACDW,GAAQ,EACNC,EAAc,GAEpB,GAA0B,IAAtBR,KAAKiB,MAAMR,OAAc,CAC3B,IAAMC,EAAOV,KAAKiB,MAAMC,MACxBR,EAAKzB,SAAU,EAFY,IAGnB7B,EAASsD,EAATtD,EAASsD,EAANrD,EACXmD,EAAYJ,KAAKhD,GAEjB4C,KAAKY,cAAcZ,KAAKL,KAAMe,GAAMG,SAAQ,SAACC,GACvCA,IAAM,EAAKjB,WACbU,GAAQ,EACEO,EAAE7B,SACZ,EAAKgC,MAAMb,KAAKU,MAKtB,MAAO,CAAEC,QAASR,GAASP,KAAKiB,MAAMR,OAAS,EAAGD,mB,GA5BvBf,GCqDhB0B,E,WAtDb,aAAe,yBADPC,WACM,EACZpB,KAAKoB,MAAQ,G,oDAGPC,EAASC,GAGf,IAFA,IAAIC,GAAU,EAELC,EAAI,EAAGA,EAAIxB,KAAKoB,MAAMX,OAAQe,IACrC,GAAIxB,KAAKoB,MAAMI,GAAGF,SAAWA,EAAU,CACrCtB,KAAKoB,MAAMK,OAAOD,EAAG,EAAG,CAAEH,OAAMC,aAChCC,GAAU,EACV,MAICA,GACHvB,KAAKoB,MAAMhB,KAAK,CAAEiB,OAAMC,e,gCAIF,IAAD,EACvB,iBAAOtB,KAAKoB,MAAMF,aAAlB,aAAO,EAAkBG,O,gCAGzB,OAA6B,IAAtBrB,KAAKoB,MAAMX,S,qCAGLiB,EAAMJ,GAEnB,IADA,IACSE,EAAI,EAAGA,EAAIxB,KAAKoB,MAAMX,OAAQe,IACrC,GAAIxB,KAAKoB,MAAMI,GAAGH,OAASK,EAAG,CAC5B1B,KAAKoB,MAAMK,OAAOD,EAAG,GACrB,S,+BAQGE,GACP,IAAK,IAAIF,EAAI,EAAGA,EAAIxB,KAAKoB,MAAMX,OAAQe,IACrC,GAAIxB,KAAKoB,MAAMI,GAAGH,OAASK,EACzB,OAAO,EAGX,OAAO,I,mCAIPC,QAAQC,IAAI5B,KAAKoB,W,KCyBNS,E,kDApEb,WAAYnC,GAA4B,IAAD,uBACrC,cAAMA,IALAoC,KAAO,IAAIC,IAIoB,EAH/BzB,MAAQ,IAAIa,EAGmB,EAF/Ba,aAAe,IAAID,IAKzB,EAAKD,KAAKG,IAAI,EAAKrC,UAAW,GAE9B,IAAK,IAAI4B,EAAI,EAAGA,EAAI,EAAK1B,KAAM0B,IAC7B,IAAK,IAAIU,EAAI,EAAGA,EAAI,EAAKnC,QAASmC,IAC5B,EAAKvC,KAAK6B,GAAGU,IAAM,EAAKtC,YAC1B,EAAKkC,KAAKG,IAAI,EAAKtC,KAAK6B,GAAGU,GAAIC,KAC/B,EAAKH,aAAaC,IAAI,EAAKtC,KAAK6B,GAAGU,GAAI,OATR,OAcrC,EAAK5B,MAAM8B,QAAQ,EAAKxC,UAAW,GAdE,E,mDAiB/B,IAAD,OACDW,GAAQ,EACNC,EAAc,GAEpB,IAAKR,KAAKM,MAAM+B,UAAW,CACzB,IAAM3B,EAAOV,KAAKM,MAAMgC,UAEhBlF,EAASsD,EAATtD,EAASsD,EAANrD,EAEX2C,KAAKY,cAAcZ,KAAKL,KAAMe,GAAMG,SAAQ,SAACC,GAC3C,IAAMyB,EAAgB,EAAKT,KAAKU,IAAI1B,GAC9B2B,EAAmB,EAAKX,KAAKU,IAAI9B,GAAmB,EAEtD+B,EAAkBF,IACpB,EAAKT,KAAKG,IAAInB,EAAG2B,GAEb,EAAKnC,MAAMoC,SAAS5B,IACtB,EAAKR,MAAMqC,eAAe7B,EAAG2B,IAI5B,EAAKnC,MAAMoC,SAAS5B,IACvB,EAAKR,MAAM8B,QAAQtB,EAAG2B,GAGxB,EAAKT,aAAaC,IAAInB,EAAGJ,MAGvBA,IAASV,KAAKH,aAChBU,GAAQ,GAEVG,EAAKzB,SAAU,EACfuB,EAAYJ,KAAKhD,GAGnB,GAAImD,EAAO,CACT,IAAIqC,EAAU5C,KAAKH,WACnB+C,EAAQ1D,gBAAiB,EAEzB,IADA,IAAIsC,EAAI,EACDoB,IAAY5C,KAAKJ,WAAa4B,EAAI,MACvCoB,EAAU5C,KAAKgC,aAAaQ,IAAII,IACxB1D,gBAAiB,EACzBsB,EAAYJ,KAAKwC,EAAQxF,GACzBoE,IAIJ,MAAO,CAAET,QAASR,GAASP,KAAKM,MAAM+B,UAAW7B,mB,GArE9Bf,GC+ERoD,E,kDA1Eb,WAAYnD,GAA4B,IAAD,uBACrC,cAAMA,IALAoC,KAAO,IAAIC,IAIoB,EAH/BzB,MAAQ,IAAIa,EAGmB,EAF/Ba,aAAe,IAAID,IAKzB,EAAKD,KAAKG,IAAI,EAAKrC,UAAW,GAE9B,IAAK,IAAI4B,EAAI,EAAGA,EAAI,EAAK1B,KAAM0B,IAC7B,IAAK,IAAIU,EAAI,EAAGA,EAAI,EAAKnC,QAASmC,IAC5B,EAAKvC,KAAK6B,GAAGU,IAAM,EAAKtC,YAC1B,EAAKkC,KAAKG,IAAI,EAAKtC,KAAK6B,GAAGU,GAAIC,KAC/B,EAAKH,aAAaC,IAAI,EAAKtC,KAAK6B,GAAGU,GAAI,OATR,OAcrC,EAAK5B,MAAM8B,QAAQ,EAAKxC,UAAW,GAdE,E,mDAiB/B,IAAD,OACDW,GAAQ,EACNC,EAAc,GAEpB,IAAKR,KAAKM,MAAM+B,UAAW,CACzB,IAAM3B,EAAOV,KAAKM,MAAMgC,UAEhBlF,EAASsD,EAATtD,EAASsD,EAANrD,EAEX2C,KAAKY,cAAcZ,KAAKL,KAAMe,GAAMG,SAAQ,SAACC,GAC3C,IAAMyB,EAAgB,EAAKT,KAAKU,IAAI1B,GAC9BgC,EAAe,EAAKC,2BAA2BjC,GAEjDgC,EAAeP,IACjB,EAAKT,KAAKG,IAAInB,EAAGgC,GAEb,EAAKxC,MAAMoC,SAAS5B,IACtB,EAAKR,MAAMqC,eAAe7B,EAAGgC,IAI5B,EAAKxC,MAAMoC,SAAS5B,IACvB,EAAKR,MAAM8B,QAAQtB,EAAGgC,GAGxB,EAAKd,aAAaC,IAAInB,EAAGJ,MAGvBA,IAASV,KAAKH,aAChBU,GAAQ,GAEVG,EAAKzB,SAAU,EACfuB,EAAYJ,KAAKhD,GAGnB,GAAImD,EAAO,CACT,IAAIqC,EAAU5C,KAAKH,WACnB+C,EAAQ1D,gBAAiB,EAEzB,IADA,IAAIsC,EAAI,EACDoB,IAAY5C,KAAKJ,WAAa4B,EAAI,MACvCoB,EAAU5C,KAAKgC,aAAaQ,IAAII,IACxB1D,gBAAiB,EACzBsB,EAAYJ,KAAKwC,EAAQxF,GACzBoE,IAIJ,MAAO,CAAET,QAASR,GAASP,KAAKM,MAAM+B,UAAW7B,iB,iDAGxBvD,GAGzB,OAFWsB,KAAKyE,IAAI/F,EAAKG,EAAI4C,KAAKH,WAAWzC,GAClCmB,KAAKyE,IAAI/F,EAAKI,EAAI2C,KAAKH,WAAWxC,O,GA1EnBoC,GCkFfwD,E,kDA7Eb,WAAYvD,GAA4B,IAAD,uBACrC,cAAMA,IALAoC,KAAO,IAAIC,IAIoB,EAH/BzB,MAAQ,IAAIa,EAGmB,EAF/Ba,aAAe,IAAID,IAKzB,EAAKD,KAAKG,IAAI,EAAKrC,UAAW,GAE9B,IAAK,IAAI4B,EAAI,EAAGA,EAAI,EAAK1B,KAAM0B,IAC7B,IAAK,IAAIU,EAAI,EAAGA,EAAI,EAAKnC,QAASmC,IAC5B,EAAKvC,KAAK6B,GAAGU,IAAM,EAAKtC,YAC1B,EAAKkC,KAAKG,IAAI,EAAKtC,KAAK6B,GAAGU,GAAIC,KAC/B,EAAKH,aAAaC,IAAI,EAAKtC,KAAK6B,GAAGU,GAAI,OATR,OAcrC,EAAK5B,MAAM8B,QAAQ,EAAKxC,UAAW,GAdE,E,mDAiB/B,IAAD,OACDW,GAAQ,EACNC,EAAc,GAEpB,IAAKR,KAAKM,MAAM+B,UAAW,CACzB,IAAM3B,EAAOV,KAAKM,MAAMgC,UAEhBlF,EAASsD,EAATtD,EAASsD,EAANrD,EAEX2C,KAAKY,cAAcZ,KAAKL,KAAMe,GAAMG,SAAQ,SAACC,GAC3C,IAAMyB,EAAgB,EAAKT,KAAKU,IAAI1B,GAC9BgC,EACH,EAAKhB,KAAKU,IAAI9B,GACf,EACA,EAAKqC,2BAA2BjC,GAE9BgC,EAAeP,IACjB,EAAKT,KAAKG,IAAInB,EAAGgC,GAEb,EAAKxC,MAAMoC,SAAS5B,IACtB,EAAKR,MAAMqC,eAAe7B,EAAGgC,IAI5B,EAAKxC,MAAMoC,SAAS5B,IACvB,EAAKR,MAAM8B,QAAQtB,EAAGgC,GAGxB,EAAKd,aAAaC,IAAInB,EAAGJ,MAGvBA,IAASV,KAAKH,aAChBU,GAAQ,GAEVG,EAAKzB,SAAU,EACfuB,EAAYJ,KAAKhD,GAGnB,GAAImD,EAAO,CACT,IAAIqC,EAAU5C,KAAKH,WACnB+C,EAAQ1D,gBAAiB,EAEzB,IADA,IAAIsC,EAAI,EACDoB,IAAY5C,KAAKJ,WAAa4B,EAAI,MACvCoB,EAAU5C,KAAKgC,aAAaQ,IAAII,IACxB1D,gBAAiB,EACzBsB,EAAYJ,KAAKwC,EAAQxF,GACzBoE,IAIJ,MAAO,CAAET,QAASR,GAASP,KAAKM,MAAM+B,UAAW7B,iB,iDAGxBvD,GAGzB,OAFWsB,KAAKyE,IAAI/F,EAAKG,EAAI4C,KAAKH,WAAWzC,GAClCmB,KAAKyE,IAAI/F,EAAKI,EAAI2C,KAAKH,WAAWxC,O,GA7EpBoC,GCGhByD,GAA0B,mBACpCpG,gBAAcqG,qBAAuB,CACpCC,KAAM,uBACNC,GAAIvG,gBAAcqG,qBAClBG,MAAO,SAAC5D,GACN,OAAO,IAAIW,EAAmBX,MALG,cAQpC5C,gBAAcyG,mBAAqB,CAClCH,KAAM,qBACNC,GAAIvG,gBAAcyG,mBAClBD,MAAO,SAAC5D,GACN,OAAO,IAAIsB,EAAiBtB,MAZK,cAepC5C,gBAAc0G,SAAW,CACxBJ,KAAM,qBACNC,GAAIvG,gBAAc0G,SAClBF,MAAO,SAAC5D,GACN,OAAO,IAAImC,EAASnC,MAnBa,cAsBpC5C,gBAAc2G,iBAAmB,CAChCL,KAAM,mBACNC,GAAIvG,gBAAc2G,iBAClBH,MAAO,SAAC5D,GACN,OAAO,IAAImD,EAAgBnD,MA1BM,cA6BpC5C,gBAAc4G,iBAAmB,CAChCN,KAAM,eACNC,GAAIvG,gBAAc4G,iBAClBJ,MAAO,SAAC5D,GACN,OAAO,IAAIuD,EAAevD,MAjCO,GCH1BiE,EAAiB,CAC5BC,UAAWV,EAAW,GACtBW,aAAc,kBAAMlC,QAAQC,IAAI,qBAQnBkC,EALaC,IAAMC,cAG/BL,GCsBH,IAiIeM,EA9Ha,WAAO,IACzBL,EAAcM,qBAAWJ,GAAzBF,UADwB,EAEIO,mBAAmB,IAFvB,mBAEzBC,EAFyB,KAEbC,EAFa,KAG5B1E,EAAO2E,iBA3Bb,SAAiBxE,EAAcC,GAE7B,IADA,IAAMwE,EAAM,GACH/C,EAAI,EAAGA,EAAI1B,EAAM0B,IAAK,CAE7B,IADA,IAAI9C,EAAM,GACDwD,EAAI,EAAGA,EAAInC,EAASmC,IAC3BxD,EAAI0B,KAAK,CACPhD,EAAGoE,EACHnE,EAAG6E,EACHjD,SAAS,EACTH,SAAS,EACTC,OAAO,EACPC,QAAQ,EACRE,gBAAgB,EAChBf,KAAM,IAGVoG,EAAInE,KAAK1B,GAEX,OAAO6F,EASqBC,CANjB,GACG,KAKsC5B,QAC9C6B,EAAMH,iBAA0B,MAJN,EAKNH,mBAA0C,MALpC,mBAKzBb,EALyB,KAKlBoB,EALkB,OAMVP,mBAA0C,MANhC,mBAMzBQ,EANyB,KAMpBC,EANoB,KAQ1BC,EAAaP,iBAAsB,MACzCQ,qBAAU,WACJxB,GAASqB,GACS,OAAhBF,EAAI7B,UACN6B,EAAI7B,QAAUgB,EAAUN,MAAM,CAC5B3D,OACAC,UAAWD,EAAK2D,EAAMlG,GAAGkG,EAAMjG,GAC/BwC,WAAYF,EAAKgF,EAAIvH,GAAGuH,EAAItH,GAC5ByC,KAnBG,GAoBHC,QAnBM,KAqBRsE,EAAc,OAGjB,CAACf,EAAOqB,IAEX,IAAMlH,EAAU,SAAVA,IAAiB,IAAD,EACagH,EAAI7B,QAAuBmC,OAApDhE,EADY,EACZA,OAAQP,EADI,EACJA,YAChB6D,EAAc7D,GACVO,IACF8D,EAAWjC,QAAUoC,sBAAsBvH,KAI/CqH,qBAAU,WAIR,OAHIL,EAAI7B,UACNiC,EAAWjC,QAAUoC,sBAAsBvH,IAEtC,kBACkB,OAAvBoH,EAAWjC,QACPqC,qBAAqBJ,EAAWjC,cAChCxD,KACL,CAACqF,EAAI7B,UAER,IAAMsC,EAAgBC,uBACpB,SACEC,EACAC,EACAxG,GAEIuG,EAAME,SAAWF,EAAMG,SACzB5F,EAAK0F,GAAGxG,GAAGG,QAAS,EACpBW,EAAK0F,GAAGxG,GAAGI,SAAU,EACrBoF,EAAc,CAACgB,MAED,OAAV/B,IACFoB,EAAS,CAAEtH,EAAGiI,EAAGhI,EAAGwB,IACpBwF,EAAc,CAACgB,IACf1F,EAAK0F,GAAGxG,GAAGC,SAAU,GAEX,OAAR6F,GAA0B,OAAVrB,IAClBsB,EAAO,CAAExH,EAAGiI,EAAGhI,EAAGwB,IAClBwF,EAAc,CAACgB,IACf1F,EAAK0F,GAAGxG,GAAGE,OAAQ,MAIzB,CAACuE,EAAOqB,IAGJa,EAAQlB,iBAAgC,MACxCmB,EAAqBN,uBACzB,SAAC9F,GACC,GAAIA,EAAEqG,QAAUF,EAAM5C,QAAS,CAC7B,IAAMvF,EAAIkB,KAAKoH,OAAOtG,EAAEuG,MAAQJ,EAAM5C,QAAQiD,YAAc,IACtDzI,EAAImB,KAAKoH,OAAOtG,EAAEyG,MAAQN,EAAM5C,QAAQmD,WAAa,IAC3D,GAAI1I,GAAK,GAAKD,GAAK,GAAKC,GA5EhB,IA4EgCD,GA7EnC,GA6E8C,CACjD,IAAMH,EAAO0C,EAAKvC,GAAGC,IAEnBJ,GACEA,EAAKgC,SAAWhC,EAAK+B,QAAU/B,EAAK6B,SAAW7B,EAAK8B,QAEtD9B,EAAK+B,QAAS,EACdqF,EAAc,CAACjH,SAKvB,CAACuC,IAGH,OACE,oCACE,2BACE8E,IAAKe,EACLtI,UAAU,QACV8I,YAAa,EACbC,YAAa,SAAC5G,GACZA,EAAE6G,iBACEV,EAAM5C,SAAWvD,EAAEqG,QACrBF,EAAM5C,QAAQuD,iBAAiB,YAAaV,IAGhDW,aAAc,WAAO,IAAD,EAClB,UAAAZ,EAAM5C,eAAN,SAAeyD,oBAAoB,YAAaZ,IAElDa,UAAW,WAAO,IAAD,EACf,UAAAd,EAAM5C,eAAN,SAAeyD,oBAAoB,YAAaZ,KAGlD,+BACG9F,EAAKf,KAAI,SAACyG,EAAG7D,GACZ,IAAM+E,EAAenC,EAAWoC,SAAShF,GACzC,OACE,kBAAC,EAAD,CACErE,IAAKqE,EACL9C,IAAK2G,EACL1G,QAASuG,EACT1F,UAAW+G,W,cCxCZE,MAjGf,YAIgF,IAH9E/G,EAG6E,EAH7EA,QACAgH,EAE6E,EAF7EA,MACAC,EAC6E,EAD7EA,SAC6E,EAC3BxC,oBAAS,GADkB,mBACtEyC,EADsE,KACnDC,EADmD,KAE7E,OACE,yBACEhJ,MAAO,CACLC,SAAU,WACVqB,WAAY,UACZ2H,MAAO,QACPC,QAAS,MACTC,aAAc,MACdC,UAAW,4CACXC,QAAS,OACTC,cAAe,MACfC,eAAgB,gBAChBC,WAAY,UAEd1I,QAAS,WACPkI,GAAqB,KAGtBH,EAAMtD,KACP,kBAAC,IAAD,CACEpF,KAAM,GACNH,MAAO,CACLyJ,UAAU,UAAD,OAAYV,EAAoB,IAAM,EAAtC,QACTlJ,WAAY,oBAGhB,kBAAC,IAAD,KACGkJ,GACC,oCACE,kBAAC,IAAOtJ,IAAR,CACEC,QAAS,CAAEgK,QAAS,GACpB9J,QAAS,CACP8J,QAAS,GACT7J,WAAY,CACVC,KAAM,UACNC,SAAU,KAGd4J,KAAM,CAAED,QAAS,GACjB1J,MAAO,CACLC,SAAU,QACVN,IAAK,EACLO,KAAM,EACNoB,WAAY,aACZsI,MAAO,QACPC,OAAQ,QACRC,eAAgB,aAElBhJ,QAAS,SAACU,GACRA,EAAEuI,kBACFf,GAAqB,MAGzB,kBAAC,IAAOvJ,IAAR,CACEJ,UAAU,cACVK,QAAS,CACPgK,QAAS,EACTD,UAAW,gCAEb7J,QAAS,CACP8J,QAAS,EACTD,UAAW,4BACX5J,WAAY,CAAEE,SAAU,IAAMD,KAAM,WAEtC6J,KAAM,CACJD,QAAS,EACTD,UAAW,gCACX5J,WAAY,CAAEE,SAAU,IAAMD,KAAM,YAGrC+B,EAAQd,KAAI,SAACiJ,GAAD,OACX,uBACE3K,UAAWwJ,IAAUmB,EAAM,gBAAazI,EACxCjC,IAAK0K,EAAIxE,GACT1E,QAAS,SAACU,GACRA,EAAEuI,kBACFjB,EAASkB,GACThB,GAAqB,KAGtBgB,EAAIzE,cC/ER0E,EAlBsB,WAAO,IAAD,EACL5D,qBAAWJ,GAAvCF,EADiC,EACjCA,UAAWC,EADsB,EACtBA,aACnB,OACE,yBAAK3G,UAAU,wBACb,6BACE,wBAAIW,MAAO,CAAEkK,UAAW,EAAGC,WAAY,IAAKC,aAAc,QAA1D,aAGA,kBAAC,EAAD,CACEvB,MAAO9C,EACPlE,QAASwI,OAAOC,OAAOjF,GACvByD,SAAU,SAACyB,GAAD,OAAqBvE,EAAauE,SCCvCC,EAZgB,WAC7B,OACE,6BACE,kBAAC,EAAD,MACA,8BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCaOC,MAhBf,WAAgB,IAAD,EAC2BnE,mBACtCR,EAAeC,WAFJ,mBACN2E,EADM,KACQC,EADR,KAKb,OACE,yBAAKtL,UAAU,OACb,kBAAC,EAAoBuL,SAArB,CACE/B,MAAO,CAAE9C,UAAW2E,EAAc1E,aAAc2E,IAEhD,kBAAC,EAAD,SCNYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhI,QAAQgI,MAAMA,EAAMC,c","file":"static/js/main.bb680946.chunk.js","sourcesContent":["export type Cell = {\n  x: number;\n  y: number;\n  visited: boolean;\n  isStart: boolean;\n  isEnd: boolean;\n  isWall: boolean;\n  isShortestPath: boolean;\n  iter: number;\n};\n\nexport * from \"./enums\";\nexport * from \"./algorithms\";\n","export enum AlgorithmEnum {\n  BREADTH_FIRST_SEARCH = 1,\n  DEPTH_FIRST_SEARCH,\n  DJIKSTRA,\n  GREEDY_ALGORITHM,\n  A_STAR_ALGORITHM,\n}\n","// @ts-nocheck\nimport React, { useContext } from \"react\";\nimport GridSettingsContext from \"../../context/GridSettingsContext\";\nimport { ALGORITHMS } from \"../../constants/Algorithms\";\n\nconst Header: React.FC<{}> = () => {\n  // const { algorithm, setAlgorithm } = useContext(GridSettingsContext);\n  return (\n    <header>\n      Algorithmic\n      {/* <select\n        onChange={(e) => {\n          setAlgorithm(ALGORITHMS[e.target.value]);\n        }}\n      >\n        {Object.keys(ALGORITHMS).map((key) => {\n          return (\n            <option\n              selected={algorithm === ALGORITHMS[key]}\n              value={ALGORITHMS[key].id}\n            >\n              {ALGORITHMS[key].name}\n            </option>\n          );\n        })}\n      </select> */}\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Cell } from \"../../types\";\nimport { FaMapMarkerAlt } from \"react-icons/fa\";\nimport { motion } from \"framer-motion\";\n\ntype StartCellProps = {\n  cell: Cell;\n};\n\nconst StartCell: React.FC<StartCellProps> = ({ cell }) => {\n  return (\n    <td className=\"start\" key={`${cell.x}-${cell.y}`}>\n      <motion.div\n        initial={{ top: \"-21px\" }}\n        animate={{\n          top: \"-7px\",\n          transition: {\n            ease: \"easeIn\",\n            duration: 0.4,\n          },\n        }}\n        style={{ position: \"absolute\", left: \"-1px\" }}\n      >\n        <FaMapMarkerAlt size={16} />\n      </motion.div>\n    </td>\n  );\n};\n\nexport default StartCell;\n","import React from \"react\";\nimport { Cell } from \"../../types\";\nimport { FaMapPin } from \"react-icons/fa\";\nimport { motion } from \"framer-motion\";\n\ntype EndCellProps = {\n  cell: Cell;\n};\n\nconst EndCell: React.FC<EndCellProps> = ({ cell }) => {\n  return (\n    <td className=\"end\" key={`${cell.x}-${cell.y}`}>\n      <motion.div\n        initial={{ top: \"-21px\" }}\n        animate={{\n          top: \"-7px\",\n          transition: {\n            ease: \"easeIn\",\n            duration: 0.4,\n          },\n        }}\n        style={{ position: \"absolute\", left: \"-1px\" }}\n      >\n        <FaMapPin size={16} />\n      </motion.div>\n    </td>\n  );\n};\n\nexport default EndCell;\n","import React, { memo } from \"react\";\nimport { Cell } from \"../../types\";\nimport StartCell from \"./StartCell\";\nimport EndCell from \"./EndCell\";\n\nfunction getColor(iter: number): string {\n  const red = 10 - (10 - 6) * (iter / (60 * 70));\n  const green = 132 - (132 - 51) * (iter / (60 * 70));\n  const blue = 255 - (255 - 97) * (iter / (60 * 70));\n\n  return `rgb(${Math.min(10, red)}, ${Math.min(132, green)}, ${Math.min(\n    255,\n    blue\n  )})`;\n}\n\ntype FieldRowProps = {\n  row: Cell[];\n  areEqual: boolean;\n  onClick: (\n    e: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>,\n    r: number,\n    c: number\n  ) => void;\n};\n\nconst FieldRow: React.FC<FieldRowProps> = ({ row, onClick }) => {\n  return (\n    <tr>\n      {row.map((c) => {\n        if (c.isStart) {\n          return <StartCell cell={c} />;\n        }\n        if (c.isEnd) {\n          return <EndCell cell={c} />;\n        }\n        return (\n          <td\n            className={`${\n              c.isWall\n                ? \"wall\"\n                : c.visited\n                ? \"visited\"\n                : c.isShortestPath\n                ? \"shortest\"\n                : \"\"\n            }`}\n            style={{\n              background:\n                c.visited && c.iter != 0 ? getColor(c.iter) : undefined,\n            }}\n            key={`${c.x}-${c.y}`}\n            onClick={(e) => onClick(e, c.x, c.y)}\n          >\n            {\"\"}\n          </td>\n        );\n      })}\n    </tr>\n  );\n};\n\nexport default memo(FieldRow, (prev, next) => {\n  return prev.onClick === next.onClick && next.areEqual;\n});\n","import { Cell, AlgorithmOptions } from \"../types\";\n\nclass BaseAlgorithm {\n  protected grid: Cell[][];\n\n  protected startCell: Cell;\n  protected targetCell: Cell;\n\n  protected rows: number;\n  protected columns: number;\n  protected iter: number;\n  constructor(options: AlgorithmOptions) {\n    this.grid = options.grid;\n    this.startCell = options.startCell;\n    this.targetCell = options.targetCell;\n\n    this.rows = options.rows;\n    this.columns = options.columns;\n\n    this.iter = 0;\n  }\n\n  getNeighboors(grid: Cell[][], cell: Cell, includeVisited = false): Cell[] {\n    this.iter++;\n    const neighboors = [];\n    const { x, y } = cell;\n    if (x - 1 >= 0) {\n      const check = grid[x - 1][y];\n      if (!check.isWall && (includeVisited || !check.visited)) {\n        check.iter = this.iter;\n        neighboors.push(check);\n      }\n    }\n\n    if (y - 1 >= 0) {\n      const check = grid[x][y - 1];\n      if (!check.isWall && (includeVisited || !check.visited)) {\n        check.iter = this.iter;\n        neighboors.push(check);\n      }\n    }\n\n    if (y + 1 < this.columns) {\n      const check = grid[x][y + 1];\n      if (!check.isWall && (includeVisited || !check.visited)) {\n        check.iter = this.iter;\n        neighboors.push(check);\n      }\n    }\n\n    if (x + 1 < this.rows) {\n      const check = grid[x + 1][y];\n      if (!check.isWall && (includeVisited || !check.visited)) {\n        check.iter = this.iter;\n        neighboors.push(check);\n      }\n    }\n\n    return neighboors;\n  }\n}\n\nexport default BaseAlgorithm;\n","import { Cell, AlgorithmOptions } from \"../types\";\nimport BaseAlgorithm from \"./BaseAlgorithm\";\n\nclass BreadthFirstSearch extends BaseAlgorithm {\n  private queue: Cell[];\n  constructor(options: AlgorithmOptions) {\n    super(options);\n    this.startCell.visited = true;\n    this.queue = [this.startCell];\n  }\n\n  tick() {\n    let found = false;\n    const changedRows: number[] = [];\n    if (this.queue.length !== 0) {\n      const node = this.queue.shift() as Cell;\n      this.getNeighboors(this.grid, node).forEach((n) => {\n        if (n === this.targetCell) {\n          found = true;\n        } else if (!n.visited) {\n          changedRows.push(n.x);\n          n.visited = true;\n          this.queue.push(n);\n        }\n      });\n    }\n    return { resume: !found && this.queue.length !== 0, changedRows };\n  }\n}\n\nexport default BreadthFirstSearch;\n","import { AlgorithmOptions, Cell } from \"../types\";\nimport BaseAlgorithm from \"./BaseAlgorithm\";\n\nclass DepthFirstSearch extends BaseAlgorithm {\n  private stack: Cell[];\n\n  constructor(options: AlgorithmOptions) {\n    super(options);\n\n    this.stack = [this.startCell];\n  }\n\n  tick() {\n    let found = false;\n    const changedRows = [];\n\n    if (this.stack.length !== 0) {\n      const node = this.stack.pop() as Cell;\n      node.visited = true;\n      const { x, y } = node;\n      changedRows.push(x);\n\n      this.getNeighboors(this.grid, node).forEach((n) => {\n        if (n === this.targetCell) {\n          found = true;\n        } else if (!n.visited) {\n          this.stack.push(n);\n        }\n      });\n    }\n\n    return { resume: !found && this.stack.length > 0, changedRows };\n  }\n}\n\nexport default DepthFirstSearch;\n","class PriorityQueue<T> {\n  private items: { elem: T; priority: number }[];\n  constructor() {\n    this.items = [];\n  }\n\n  enqueue(elem: T, priority: number) {\n    let contain = false;\n\n    for (let i = 0; i < this.items.length; i++) {\n      if (this.items[i].priority < priority) {\n        this.items.splice(i, 0, { elem, priority });\n        contain = true;\n        break;\n      }\n    }\n\n    if (!contain) {\n      this.items.push({ elem, priority });\n    }\n  }\n\n  dequeue(): T | undefined {\n    return this.items.pop()?.elem;\n  }\n  isEmpty(): boolean {\n    return this.items.length === 0;\n  }\n\n  changePriority(t: T, priority: number) {\n    let deleted = false;\n    for (let i = 0; i < this.items.length; i++) {\n      if (this.items[i].elem === t) {\n        this.items.splice(i, 1);\n        break;\n      }\n    }\n    if (deleted) {\n      this.enqueue(t, priority);\n    }\n  }\n\n  hasValue(t: T): boolean {\n    for (let i = 0; i < this.items.length; i++) {\n      if (this.items[i].elem === t) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  printQueue() {\n    console.log(this.items);\n  }\n}\n\nexport default PriorityQueue;\n","import { AlgorithmOptions, Cell } from \"../types\";\nimport PriorityQueue from \"./PriorityQueue\";\nimport BaseAlgorithm from \"./BaseAlgorithm\";\n\nclass Djikstra extends BaseAlgorithm {\n  private dist = new Map<Cell, number>();\n  private queue = new PriorityQueue<Cell>();\n  private previousCell = new Map<Cell, Cell | null>();\n\n  constructor(options: AlgorithmOptions) {\n    super(options);\n\n    this.dist.set(this.startCell, 0);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.grid[i][j] != this.startCell) {\n          this.dist.set(this.grid[i][j], Infinity);\n          this.previousCell.set(this.grid[i][j], null);\n        }\n      }\n    }\n\n    this.queue.enqueue(this.startCell, 0);\n  }\n\n  tick() {\n    let found = false;\n    const changedRows = [];\n\n    if (!this.queue.isEmpty()) {\n      const node = this.queue.dequeue() as Cell;\n\n      const { x, y } = node;\n\n      this.getNeighboors(this.grid, node).forEach((n) => {\n        const exisitingDist = this.dist.get(n) as number;\n        const distToNeighboor = (this.dist.get(node) as number) + 1;\n\n        if (distToNeighboor < exisitingDist) {\n          this.dist.set(n, distToNeighboor);\n\n          if (this.queue.hasValue(n)) {\n            this.queue.changePriority(n, distToNeighboor);\n          }\n        }\n\n        if (!this.queue.hasValue(n)) {\n          this.queue.enqueue(n, distToNeighboor);\n        }\n\n        this.previousCell.set(n, node);\n      });\n\n      if (node === this.targetCell) {\n        found = true;\n      }\n      node.visited = true;\n      changedRows.push(x);\n    }\n\n    if (found) {\n      let current = this.targetCell;\n      current.isShortestPath = true;\n      let i = 0;\n      while (current !== this.startCell && i < 100) {\n        current = this.previousCell.get(current) as Cell;\n        current.isShortestPath = true;\n        changedRows.push(current.x);\n        i++;\n      }\n    }\n\n    return { resume: !found || this.queue.isEmpty(), changedRows };\n  }\n}\n\nexport default Djikstra;\n","import BaseAlgorithm from \"./BaseAlgorithm\";\nimport { AlgorithmOptions, Cell } from \"../types\";\nimport PriorityQueue from \"./PriorityQueue\";\n\nclass GreedyAlgorithm extends BaseAlgorithm {\n  private dist = new Map<Cell, number>();\n  private queue = new PriorityQueue<Cell>();\n  private previousCell = new Map<Cell, Cell | null>();\n\n  constructor(options: AlgorithmOptions) {\n    super(options);\n\n    this.dist.set(this.startCell, 0);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.grid[i][j] != this.startCell) {\n          this.dist.set(this.grid[i][j], Infinity);\n          this.previousCell.set(this.grid[i][j], null);\n        }\n      }\n    }\n\n    this.queue.enqueue(this.startCell, 0);\n  }\n\n  tick() {\n    let found = false;\n    const changedRows = [];\n\n    if (!this.queue.isEmpty()) {\n      const node = this.queue.dequeue() as Cell;\n\n      const { x, y } = node;\n\n      this.getNeighboors(this.grid, node).forEach((n) => {\n        const exisitingDist = this.dist.get(n) as number;\n        const distToTarget = this.manhattanDistanceHeuristic(n);\n\n        if (distToTarget < exisitingDist) {\n          this.dist.set(n, distToTarget);\n\n          if (this.queue.hasValue(n)) {\n            this.queue.changePriority(n, distToTarget);\n          }\n        }\n\n        if (!this.queue.hasValue(n)) {\n          this.queue.enqueue(n, distToTarget);\n        }\n\n        this.previousCell.set(n, node);\n      });\n\n      if (node === this.targetCell) {\n        found = true;\n      }\n      node.visited = true;\n      changedRows.push(x);\n    }\n\n    if (found) {\n      let current = this.targetCell;\n      current.isShortestPath = true;\n      let i = 0;\n      while (current !== this.startCell && i < 100) {\n        current = this.previousCell.get(current) as Cell;\n        current.isShortestPath = true;\n        changedRows.push(current.x);\n        i++;\n      }\n    }\n\n    return { resume: !found || this.queue.isEmpty(), changedRows };\n  }\n\n  manhattanDistanceHeuristic(cell: Cell): number {\n    const dx = Math.abs(cell.x - this.targetCell.x);\n    const dy = Math.abs(cell.y - this.targetCell.y);\n    return dx + dy;\n  }\n}\n\nexport default GreedyAlgorithm;\n","import BaseAlgorithm from \"./BaseAlgorithm\";\nimport { AlgorithmOptions, Cell } from \"../types\";\nimport PriorityQueue from \"./PriorityQueue\";\n\nclass AStarAlgorithm extends BaseAlgorithm {\n  private dist = new Map<Cell, number>();\n  private queue = new PriorityQueue<Cell>();\n  private previousCell = new Map<Cell, Cell | null>();\n\n  constructor(options: AlgorithmOptions) {\n    super(options);\n\n    this.dist.set(this.startCell, 0);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.grid[i][j] != this.startCell) {\n          this.dist.set(this.grid[i][j], Infinity);\n          this.previousCell.set(this.grid[i][j], null);\n        }\n      }\n    }\n\n    this.queue.enqueue(this.startCell, 0);\n  }\n\n  tick() {\n    let found = false;\n    const changedRows = [];\n\n    if (!this.queue.isEmpty()) {\n      const node = this.queue.dequeue() as Cell;\n\n      const { x, y } = node;\n\n      this.getNeighboors(this.grid, node).forEach((n) => {\n        const exisitingDist = this.dist.get(n) as number;\n        const distToTarget =\n          (this.dist.get(node) as number) +\n          1 +\n          this.manhattanDistanceHeuristic(n);\n\n        if (distToTarget < exisitingDist) {\n          this.dist.set(n, distToTarget);\n\n          if (this.queue.hasValue(n)) {\n            this.queue.changePriority(n, distToTarget);\n          }\n        }\n\n        if (!this.queue.hasValue(n)) {\n          this.queue.enqueue(n, distToTarget);\n        }\n\n        this.previousCell.set(n, node);\n      });\n\n      if (node === this.targetCell) {\n        found = true;\n      }\n      node.visited = true;\n      changedRows.push(x);\n    }\n\n    if (found) {\n      let current = this.targetCell;\n      current.isShortestPath = true;\n      let i = 0;\n      while (current !== this.startCell && i < 100) {\n        current = this.previousCell.get(current) as Cell;\n        current.isShortestPath = true;\n        changedRows.push(current.x);\n        i++;\n      }\n    }\n\n    return { resume: !found || this.queue.isEmpty(), changedRows };\n  }\n\n  manhattanDistanceHeuristic(cell: Cell): number {\n    const dx = Math.abs(cell.x - this.targetCell.x);\n    const dy = Math.abs(cell.y - this.targetCell.y);\n    return dx + dy;\n  }\n}\n\nexport default AStarAlgorithm;\n","import { AlgorithmEnum, Algorithm, AlgorithmStore, Cell } from \"../types\";\nimport BreadthFirstSearch from \"../algorithms/BreadthFirstSearch\";\nimport DepthFirstSearch from \"../algorithms/DepthFirstSearch\";\nimport Djikstra from \"../algorithms/Djikstra\";\nimport GreedyAlgorithm from \"../algorithms/GreedyAlgorithm\";\nimport AStarAlgorithm from \"../algorithms/AStarAlgorithm\";\n\nexport const ALGORITHMS: AlgorithmStore = {\n  [AlgorithmEnum.BREADTH_FIRST_SEARCH]: {\n    name: \"Breadth First Search\",\n    id: AlgorithmEnum.BREADTH_FIRST_SEARCH,\n    start: (options) => {\n      return new BreadthFirstSearch(options);\n    },\n  },\n  [AlgorithmEnum.DEPTH_FIRST_SEARCH]: {\n    name: \"Depth First Search\",\n    id: AlgorithmEnum.DEPTH_FIRST_SEARCH,\n    start: (options) => {\n      return new DepthFirstSearch(options);\n    },\n  },\n  [AlgorithmEnum.DJIKSTRA]: {\n    name: \"Djikstra Algorithm\",\n    id: AlgorithmEnum.DJIKSTRA,\n    start: (options) => {\n      return new Djikstra(options);\n    },\n  },\n  [AlgorithmEnum.GREEDY_ALGORITHM]: {\n    name: \"Greedy Algorithm\",\n    id: AlgorithmEnum.GREEDY_ALGORITHM,\n    start: (options) => {\n      return new GreedyAlgorithm(options);\n    },\n  },\n  [AlgorithmEnum.A_STAR_ALGORITHM]: {\n    name: \"A* Algorithm\",\n    id: AlgorithmEnum.A_STAR_ALGORITHM,\n    start: (options) => {\n      return new AStarAlgorithm(options);\n    },\n  },\n};\n","import React from \"react\";\nimport { ALGORITHMS } from \"../constants/Algorithms\";\nimport { Algorithm } from \"../types\";\n\nexport const defaultContext = {\n  algorithm: ALGORITHMS[1],\n  setAlgorithm: () => console.log(\"NOT IMPLEMENTED\"),\n};\n\nconst GridSettingsContext = React.createContext<{\n  algorithm: Algorithm;\n  setAlgorithm: Function;\n}>(defaultContext);\n\nexport default GridSettingsContext;\n","import React, {\n  useRef,\n  useEffect,\n  useState,\n  useCallback,\n  useContext,\n} from \"react\";\nimport \"../../css/field.scss\";\nimport _ from \"lodash\";\nimport { Cell, IAlgorithm } from \"../../types\";\nimport FieldRow from \"./FieldRow\";\nimport GridSettingsContext from \"../../context/GridSettingsContext\";\n\nfunction getGrid(rows: number, columns: number): Cell[][] {\n  const arr = [];\n  for (let i = 0; i < rows; i++) {\n    let row = [];\n    for (let j = 0; j < columns; j++) {\n      row.push({\n        x: i,\n        y: j,\n        visited: false,\n        isStart: false,\n        isEnd: false,\n        isWall: false,\n        isShortestPath: false,\n        iter: 0,\n      });\n    }\n    arr.push(row);\n  }\n  return arr;\n}\n\nconst ROWS = 50;\nconst COLUMNS = 70;\n\nconst Field: React.FC<{}> = () => {\n  const { algorithm } = useContext(GridSettingsContext);\n  const [changeDiff, setChangeDiff] = useState<number[]>([]);\n  let grid = useRef<Cell[][]>(getGrid(ROWS, COLUMNS)).current;\n  const ref = useRef<IAlgorithm | null>(null);\n  const [start, setStart] = useState<{ x: number; y: number } | null>(null);\n  const [end, setEnd] = useState<{ x: number; y: number } | null>(null);\n  // const [state, send] = useMachine(FieldStateMachine);\n  const requestRef = useRef<number | null>(null);\n  useEffect(() => {\n    if (start && end) {\n      if (ref.current === null) {\n        ref.current = algorithm.start({\n          grid,\n          startCell: grid[start.x][start.y],\n          targetCell: grid[end.x][end.y],\n          rows: ROWS,\n          columns: COLUMNS,\n        });\n        setChangeDiff([]);\n      }\n    }\n  }, [start, end]);\n\n  const animate = () => {\n    const { resume, changedRows } = (ref.current as IAlgorithm).tick();\n    setChangeDiff(changedRows);\n    if (resume) {\n      requestRef.current = requestAnimationFrame(animate);\n    }\n  };\n\n  useEffect(() => {\n    if (ref.current) {\n      requestRef.current = requestAnimationFrame(animate);\n    }\n    return () =>\n      requestRef.current !== null\n        ? cancelAnimationFrame(requestRef.current)\n        : undefined;\n  }, [ref.current]);\n\n  const clickCallback = useCallback(\n    (\n      event: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>,\n      r: number,\n      c: number\n    ) => {\n      if (event.metaKey || event.ctrlKey) {\n        grid[r][c].isWall = true;\n        grid[r][c].visited = true;\n        setChangeDiff([r]);\n      } else {\n        if (start === null) {\n          setStart({ x: r, y: c });\n          setChangeDiff([r]);\n          grid[r][c].isStart = true;\n        }\n        if (end === null && start !== null) {\n          setEnd({ x: r, y: c });\n          setChangeDiff([r]);\n          grid[r][c].isEnd = true;\n        }\n      }\n    },\n    [start, end]\n  );\n\n  const table = useRef<HTMLTableElement | null>(null);\n  const onMouseMoveHandler = useCallback(\n    (e: MouseEvent) => {\n      if (e.altKey && table.current) {\n        const y = Math.floor((e.pageX - table.current.offsetLeft) / 16);\n        const x = Math.floor((e.pageY - table.current.offsetTop) / 16);\n        if (y >= 0 && x >= 0 && y <= COLUMNS && x <= ROWS) {\n          const cell = grid[x][y];\n          if (\n            cell &&\n            !(cell.visited && cell.isWall && cell.isStart && cell.isEnd)\n          ) {\n            cell.isWall = true;\n            setChangeDiff([x]);\n          }\n        }\n      }\n    },\n    [grid]\n  );\n\n  return (\n    <>\n      <table\n        ref={table}\n        className=\"field\"\n        cellSpacing={0}\n        onMouseDown={(e) => {\n          e.preventDefault();\n          if (table.current && e.altKey) {\n            table.current.addEventListener(\"mousemove\", onMouseMoveHandler);\n          }\n        }}\n        onMouseLeave={() => {\n          table.current?.removeEventListener(\"mousemove\", onMouseMoveHandler);\n        }}\n        onMouseUp={() => {\n          table.current?.removeEventListener(\"mousemove\", onMouseMoveHandler);\n        }}\n      >\n        <tbody>\n          {grid.map((r, i) => {\n            const shouldRender = changeDiff.includes(i);\n            return (\n              <FieldRow\n                key={i}\n                row={r}\n                onClick={clickCallback}\n                areEqual={!shouldRender}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default Field;\n","import React, { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { IoIosArrowDown } from \"react-icons/io\";\nimport \"../../css/drop-down-menu.scss\";\n\ninterface OptionValue {\n  id: string | number;\n  name: string;\n}\n\ntype DropwDownMenuProps<T extends OptionValue> = {\n  options: T[];\n  value: T;\n  onChange: (t: T) => void;\n};\n\nfunction DropDownMenu<T extends OptionValue>({\n  options,\n  value,\n  onChange,\n}: DropwDownMenuProps<T> & { children?: React.ReactNode }): React.ReactElement {\n  const [dropDownIsVisible, setDropDownIsVisible] = useState(false);\n  return (\n    <div\n      style={{\n        position: \"relative\",\n        background: \"#0b131b\",\n        color: \"white\",\n        padding: \"8px\",\n        borderRadius: \"4px\",\n        boxShadow: \"inset rgba(255,255,255,0.25) 0px 6px 14px\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n      }}\n      onClick={() => {\n        setDropDownIsVisible(true);\n      }}\n    >\n      {value.name}\n      <IoIosArrowDown\n        size={20}\n        style={{\n          transform: `rotate(${dropDownIsVisible ? 180 : 0}deg)`,\n          transition: \"transform 0.3s\",\n        }}\n      />\n      <AnimatePresence>\n        {dropDownIsVisible && (\n          <>\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{\n                opacity: 0.3,\n                transition: {\n                  ease: \"easeOut\",\n                  duration: 0.2,\n                },\n              }}\n              exit={{ opacity: 0 }}\n              style={{\n                position: \"fixed\",\n                top: 0,\n                left: 0,\n                background: \"rgb(0,0,0)\",\n                width: \"100vw\",\n                height: \"100vh\",\n                backdropFilter: \"blur(8px)\",\n              }}\n              onClick={(e) => {\n                e.stopPropagation();\n                setDropDownIsVisible(false);\n              }}\n            ></motion.div>\n            <motion.div\n              className=\"select-menu\"\n              initial={{\n                opacity: 0,\n                transform: \"scale(0.2) translateY(-50px)\",\n              }}\n              animate={{\n                opacity: 1,\n                transform: \"scale(1)  translateY(0px)\",\n                transition: { duration: 0.15, ease: \"easeIn\" },\n              }}\n              exit={{\n                opacity: 0,\n                transform: \"scale(0.2)  translateY(-50px)\",\n                transition: { duration: 0.15, ease: \"easeIn\" },\n              }}\n            >\n              {options.map((opt) => (\n                <p\n                  className={value === opt ? \"selected\" : undefined}\n                  key={opt.id}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onChange(opt);\n                    setDropDownIsVisible(false);\n                  }}\n                >\n                  {opt.name}\n                </p>\n              ))}\n            </motion.div>\n          </>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\nexport default DropDownMenu;\n","import React, { useContext } from \"react\";\nimport GridSettingsContext from \"../../context/GridSettingsContext\";\nimport DropDownMenu from \"../input/DropDownMenu\";\nimport { ALGORITHMS } from \"../../constants/Algorithms\";\n\nconst PathFinderSettings: React.FC = () => {\n  const { algorithm, setAlgorithm } = useContext(GridSettingsContext);\n  return (\n    <div className=\"path-finder-settings\">\n      <div>\n        <h3 style={{ marginTop: 0, fontWeight: 300, marginBottom: \"8px\" }}>\n          Algorithm\n        </h3>\n        <DropDownMenu\n          value={algorithm}\n          options={Object.values(ALGORITHMS)}\n          onChange={(algo: Algorithm) => setAlgorithm(algo)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default PathFinderSettings;\n","import React from \"react\";\nimport Header from \"../components/header/Header\";\nimport Field from \"../components/field/Field\";\nimport PathFinderSettings from \"../components/settings/PathFinderSettings\";\n\nconst MainView: React.FC<{}> = () => {\n  return (\n    <div>\n      <Header></Header>\n      <main>\n        <Field />\n        <PathFinderSettings />\n      </main>\n    </div>\n  );\n};\n\nexport default MainView;\n","import React, { useState } from \"react\";\nimport Field from \"./components/field/Field\";\nimport MainView from \"./views/MainView\";\nimport GridSettingsContext, {\n  defaultContext,\n} from \"./context/GridSettingsContext\";\nimport { Algorithm } from \"./types\";\n\nfunction App() {\n  const [gridSettings, setGridSettings] = useState<Algorithm>(\n    defaultContext.algorithm\n  );\n\n  return (\n    <div className=\"App\">\n      <GridSettingsContext.Provider\n        value={{ algorithm: gridSettings, setAlgorithm: setGridSettings }}\n      >\n        <MainView />\n      </GridSettingsContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./css/main.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}